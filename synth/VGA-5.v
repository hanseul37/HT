/* Generated by Yosys 0.32+74 (git sha1 b739213d9, x86_64-w64-mingw32-g++ 9.2.1 -Os) */

(* src = "clock_divider.v:23.1-45.10" *)
module clock_divider(clk, divided_clk);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  (* src = "clock_divider.v:24.12-24.15" *)
  input clk;
  wire clk;
  (* init = 32'd0 *)
  (* src = "clock_divider.v:28.9-28.22" *)
  wire [31:0] counter_value;
  (* init = 1'h0 *)
  (* src = "clock_divider.v:25.12-25.23" *)
  output divided_clk;
  wire divided_clk;
  iv1v0x05 _078_ (
    .a(counter_value[0]),
    .z(_000_)
  );
  iv1v0x05 _079_ (
    .a(counter_value[11]),
    .z(_051_)
  );
  iv1v0x05 _080_ (
    .a(counter_value[10]),
    .z(_052_)
  );
  iv1v0x05 _081_ (
    .a(counter_value[12]),
    .z(_053_)
  );
  iv1v0x05 _082_ (
    .a(counter_value[17]),
    .z(_054_)
  );
  iv1v0x05 _083_ (
    .a(counter_value[19]),
    .z(_055_)
  );
  iv1v0x05 _084_ (
    .a(counter_value[21]),
    .z(_056_)
  );
  iv1v0x05 _085_ (
    .a(counter_value[20]),
    .z(_057_)
  );
  iv1v0x05 _086_ (
    .a(counter_value[23]),
    .z(_058_)
  );
  iv1v0x05 _087_ (
    .a(counter_value[25]),
    .z(_059_)
  );
  iv1v0x05 _088_ (
    .a(counter_value[28]),
    .z(_060_)
  );
  iv1v0x05 _089_ (
    .a(counter_value[30]),
    .z(_061_)
  );
  nd2av0x05 _090_ (
    .a(counter_value[1]),
    .b(counter_value[0]),
    .z(_062_)
  );
  nd2v0x05 _091_ (
    .a(_000_),
    .b(counter_value[1]),
    .z(_063_)
  );
  nr4v1x05 _092_ (
    .a(counter_value[5]),
    .b(counter_value[4]),
    .c(counter_value[7]),
    .d(counter_value[6]),
    .z(_064_)
  );
  nr3v0x05 _093_ (
    .a(counter_value[3]),
    .b(counter_value[2]),
    .c(_062_),
    .z(_065_)
  );
  nr4v1x05 _094_ (
    .a(counter_value[13]),
    .b(counter_value[12]),
    .c(counter_value[15]),
    .d(counter_value[14]),
    .z(_066_)
  );
  or4v0x05 _095_ (
    .a(counter_value[9]),
    .b(counter_value[8]),
    .c(counter_value[11]),
    .d(counter_value[10]),
    .z(_067_)
  );
  or4v0x05 _096_ (
    .a(counter_value[25]),
    .b(counter_value[24]),
    .c(counter_value[31]),
    .d(counter_value[30]),
    .z(_068_)
  );
  nr4v1x05 _097_ (
    .a(counter_value[29]),
    .b(counter_value[28]),
    .c(_067_),
    .d(_068_),
    .z(_069_)
  );
  nd4v0x05 _098_ (
    .a(_064_),
    .b(_065_),
    .c(_066_),
    .d(_069_),
    .z(_070_)
  );
  nr3v0x05 _099_ (
    .a(counter_value[23]),
    .b(counter_value[27]),
    .c(counter_value[26]),
    .z(_071_)
  );
  nd3v0x05 _100_ (
    .a(_056_),
    .b(_057_),
    .c(_071_),
    .z(_072_)
  );
  nr3v0x05 _101_ (
    .a(counter_value[16]),
    .b(counter_value[19]),
    .c(counter_value[18]),
    .z(_073_)
  );
  nd3abv0x05 _102_ (
    .a(counter_value[17]),
    .b(counter_value[22]),
    .c(_073_),
    .z(_074_)
  );
  nr3v0x05 _103_ (
    .a(_070_),
    .b(_072_),
    .c(_074_),
    .z(_075_)
  );
  aoi21v0x05 _104_ (
    .a1(_062_),
    .a2(_063_),
    .b(_075_),
    .z(_001_)
  );
  xaon21v0x05 _105_ (
    .a1(counter_value[0]),
    .a2(counter_value[1]),
    .b(counter_value[2]),
    .z(_002_)
  );
  an4v0x05 _106_ (
    .a(counter_value[0]),
    .b(counter_value[1]),
    .c(counter_value[3]),
    .d(counter_value[2]),
    .z(_076_)
  );
  aoi31v0x05 _107_ (
    .a1(counter_value[0]),
    .a2(counter_value[1]),
    .a3(counter_value[2]),
    .b(counter_value[3]),
    .z(_077_)
  );
  nr2v0x05 _108_ (
    .a(_076_),
    .b(_077_),
    .z(_003_)
  );
  xor2v0x05 _109_ (
    .a(counter_value[4]),
    .b(_076_),
    .z(_004_)
  );
  xaon21v0x05 _110_ (
    .a1(counter_value[4]),
    .a2(_076_),
    .b(counter_value[5]),
    .z(_005_)
  );
  an4v0x05 _111_ (
    .a(counter_value[5]),
    .b(counter_value[4]),
    .c(counter_value[6]),
    .d(_076_),
    .z(_033_)
  );
  aoi31v0x05 _112_ (
    .a1(counter_value[5]),
    .a2(counter_value[4]),
    .a3(_076_),
    .b(counter_value[6]),
    .z(_034_)
  );
  nr2v0x05 _113_ (
    .a(_033_),
    .b(_034_),
    .z(_006_)
  );
  an2v0x05 _114_ (
    .a(counter_value[7]),
    .b(_033_),
    .z(_035_)
  );
  xor2v0x05 _115_ (
    .a(counter_value[7]),
    .b(_033_),
    .z(_007_)
  );
  xor2v0x05 _116_ (
    .a(counter_value[8]),
    .b(_035_),
    .z(_008_)
  );
  nd4v0x05 _117_ (
    .a(counter_value[7]),
    .b(counter_value[9]),
    .c(counter_value[8]),
    .d(_033_),
    .z(_036_)
  );
  xaon21v0x05 _118_ (
    .a1(counter_value[8]),
    .a2(_035_),
    .b(counter_value[9]),
    .z(_009_)
  );
  nr2v0x05 _119_ (
    .a(_052_),
    .b(_036_),
    .z(_037_)
  );
  xnr2v0x05 _120_ (
    .a(counter_value[10]),
    .b(_036_),
    .z(_010_)
  );
  xnr2v0x05 _121_ (
    .a(_051_),
    .b(_037_),
    .z(_011_)
  );
  nr4v1x05 _122_ (
    .a(_051_),
    .b(_052_),
    .c(_053_),
    .d(_036_),
    .z(_038_)
  );
  xaoi21v0x05 _123_ (
    .a1(counter_value[11]),
    .a2(_037_),
    .b(_053_),
    .z(_012_)
  );
  an2v0x05 _124_ (
    .a(counter_value[13]),
    .b(_038_),
    .z(_039_)
  );
  xor2v0x05 _125_ (
    .a(counter_value[13]),
    .b(_038_),
    .z(_013_)
  );
  xor2v0x05 _126_ (
    .a(counter_value[14]),
    .b(_039_),
    .z(_014_)
  );
  an4v0x05 _127_ (
    .a(counter_value[13]),
    .b(counter_value[15]),
    .c(counter_value[14]),
    .d(_038_),
    .z(_040_)
  );
  aoi21v0x05 _128_ (
    .a1(counter_value[14]),
    .a2(_039_),
    .b(counter_value[15]),
    .z(_041_)
  );
  nr2v0x05 _129_ (
    .a(_040_),
    .b(_041_),
    .z(_015_)
  );
  nd2v0x05 _130_ (
    .a(counter_value[16]),
    .b(_040_),
    .z(_042_)
  );
  xor2v0x05 _131_ (
    .a(counter_value[16]),
    .b(_040_),
    .z(_016_)
  );
  xnr2v0x05 _132_ (
    .a(counter_value[17]),
    .b(_042_),
    .z(_017_)
  );
  nd4v0x05 _133_ (
    .a(counter_value[17]),
    .b(counter_value[16]),
    .c(counter_value[18]),
    .d(_040_),
    .z(_043_)
  );
  xooi21v0x05 _134_ (
    .a1(_054_),
    .a2(_042_),
    .b(counter_value[18]),
    .z(_018_)
  );
  nr2v0x05 _135_ (
    .a(_055_),
    .b(_043_),
    .z(_044_)
  );
  xnr2v0x05 _136_ (
    .a(counter_value[19]),
    .b(_043_),
    .z(_019_)
  );
  xnr2v0x05 _137_ (
    .a(_057_),
    .b(_044_),
    .z(_020_)
  );
  nr4v1x05 _138_ (
    .a(_055_),
    .b(_056_),
    .c(_057_),
    .d(_043_),
    .z(_045_)
  );
  xaoi21v0x05 _139_ (
    .a1(counter_value[20]),
    .a2(_044_),
    .b(_056_),
    .z(_021_)
  );
  nd2v0x05 _140_ (
    .a(counter_value[22]),
    .b(_045_),
    .z(_046_)
  );
  xor2v0x05 _141_ (
    .a(counter_value[22]),
    .b(_045_),
    .z(_022_)
  );
  xnr2v0x05 _142_ (
    .a(counter_value[23]),
    .b(_046_),
    .z(_023_)
  );
  nd4v0x05 _143_ (
    .a(counter_value[23]),
    .b(counter_value[22]),
    .c(counter_value[24]),
    .d(_045_),
    .z(_047_)
  );
  xooi21v0x05 _144_ (
    .a1(_058_),
    .a2(_046_),
    .b(counter_value[24]),
    .z(_024_)
  );
  xnr2v0x05 _145_ (
    .a(counter_value[25]),
    .b(_047_),
    .z(_025_)
  );
  nr3abv0x05 _146_ (
    .a(counter_value[25]),
    .b(counter_value[26]),
    .c(_047_),
    .z(_048_)
  );
  xooi21v0x05 _147_ (
    .a1(_059_),
    .a2(_047_),
    .b(counter_value[26]),
    .z(_026_)
  );
  nd2v0x05 _148_ (
    .a(counter_value[27]),
    .b(_048_),
    .z(_049_)
  );
  xor2v0x05 _149_ (
    .a(counter_value[27]),
    .b(_048_),
    .z(_027_)
  );
  xnr2v0x05 _150_ (
    .a(counter_value[28]),
    .b(_049_),
    .z(_028_)
  );
  nd4v0x05 _151_ (
    .a(counter_value[27]),
    .b(counter_value[29]),
    .c(counter_value[28]),
    .d(_048_),
    .z(_050_)
  );
  xooi21v0x05 _152_ (
    .a1(_060_),
    .a2(_049_),
    .b(counter_value[29]),
    .z(_029_)
  );
  xnr2v0x05 _153_ (
    .a(counter_value[30]),
    .b(_050_),
    .z(_030_)
  );
  xooi21v0x05 _154_ (
    .a1(_061_),
    .a2(_050_),
    .b(counter_value[31]),
    .z(_031_)
  );
  xor2v0x05 _155_ (
    .a(divided_clk),
    .b(_075_),
    .z(_032_)
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _156_ (
    .cp(clk),
    .d(_000_),
    .z(counter_value[0])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _157_ (
    .cp(clk),
    .d(_001_),
    .z(counter_value[1])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _158_ (
    .cp(clk),
    .d(_002_),
    .z(counter_value[2])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _159_ (
    .cp(clk),
    .d(_003_),
    .z(counter_value[3])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _160_ (
    .cp(clk),
    .d(_004_),
    .z(counter_value[4])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _161_ (
    .cp(clk),
    .d(_005_),
    .z(counter_value[5])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _162_ (
    .cp(clk),
    .d(_006_),
    .z(counter_value[6])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _163_ (
    .cp(clk),
    .d(_007_),
    .z(counter_value[7])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _164_ (
    .cp(clk),
    .d(_008_),
    .z(counter_value[8])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _165_ (
    .cp(clk),
    .d(_009_),
    .z(counter_value[9])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _166_ (
    .cp(clk),
    .d(_010_),
    .z(counter_value[10])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _167_ (
    .cp(clk),
    .d(_011_),
    .z(counter_value[11])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _168_ (
    .cp(clk),
    .d(_012_),
    .z(counter_value[12])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _169_ (
    .cp(clk),
    .d(_013_),
    .z(counter_value[13])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _170_ (
    .cp(clk),
    .d(_014_),
    .z(counter_value[14])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _171_ (
    .cp(clk),
    .d(_015_),
    .z(counter_value[15])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _172_ (
    .cp(clk),
    .d(_016_),
    .z(counter_value[16])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _173_ (
    .cp(clk),
    .d(_017_),
    .z(counter_value[17])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _174_ (
    .cp(clk),
    .d(_018_),
    .z(counter_value[18])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _175_ (
    .cp(clk),
    .d(_019_),
    .z(counter_value[19])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _176_ (
    .cp(clk),
    .d(_020_),
    .z(counter_value[20])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _177_ (
    .cp(clk),
    .d(_021_),
    .z(counter_value[21])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _178_ (
    .cp(clk),
    .d(_022_),
    .z(counter_value[22])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _179_ (
    .cp(clk),
    .d(_023_),
    .z(counter_value[23])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _180_ (
    .cp(clk),
    .d(_024_),
    .z(counter_value[24])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _181_ (
    .cp(clk),
    .d(_025_),
    .z(counter_value[25])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _182_ (
    .cp(clk),
    .d(_026_),
    .z(counter_value[26])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _183_ (
    .cp(clk),
    .d(_027_),
    .z(counter_value[27])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _184_ (
    .cp(clk),
    .d(_028_),
    .z(counter_value[28])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _185_ (
    .cp(clk),
    .d(_029_),
    .z(counter_value[29])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _186_ (
    .cp(clk),
    .d(_030_),
    .z(counter_value[30])
  );
  (* src = "clock_divider.v:29.1-35.4" *)
  dfnt1v0x2 _187_ (
    .cp(clk),
    .d(_031_),
    .z(counter_value[31])
  );
  (* src = "clock_divider.v:38.1-44.4" *)
  dfnt1v0x2 _188_ (
    .cp(clk),
    .d(_032_),
    .z(divided_clk)
  );
endmodule

(* src = "horizontal_counter.v:23.1-40.10" *)
module horizontal_counter(clk_25MHz, enable_V, H_Count);
  (* src = "horizontal_counter.v:29.5-39.8" *)
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  (* init = 16'h0000 *)
  (* src = "horizontal_counter.v:26.23-26.30" *)
  output [15:0] H_Count;
  wire [15:0] H_Count;
  (* src = "horizontal_counter.v:24.11-24.20" *)
  input clk_25MHz;
  wire clk_25MHz;
  (* init = 1'h0 *)
  (* src = "horizontal_counter.v:25.16-25.24" *)
  output enable_V;
  wire enable_V;
  iv1v0x05 _32_ (
    .a(H_Count[7]),
    .z(_11_)
  );
  iv1v0x05 _33_ (
    .a(H_Count[8]),
    .z(_12_)
  );
  an4v0x05 _34_ (
    .a(H_Count[3]),
    .b(H_Count[2]),
    .c(H_Count[1]),
    .d(H_Count[0]),
    .z(_13_)
  );
  an2v0x05 _35_ (
    .a(H_Count[4]),
    .b(_13_),
    .z(_14_)
  );
  or2v0x05 _36_ (
    .a(H_Count[7]),
    .b(H_Count[6]),
    .z(_15_)
  );
  aoi112v0x05 _37_ (
    .a(H_Count[5]),
    .b(_15_),
    .c1(_13_),
    .c2(H_Count[4]),
    .z(_16_)
  );
  nd2v0x05 _38_ (
    .a(H_Count[9]),
    .b(H_Count[8]),
    .z(_17_)
  );
  nr3v0x05 _39_ (
    .a(H_Count[11]),
    .b(H_Count[10]),
    .c(H_Count[15]),
    .z(_18_)
  );
  nr3v0x05 _40_ (
    .a(H_Count[13]),
    .b(H_Count[14]),
    .c(H_Count[12]),
    .z(_19_)
  );
  oai211v0x05 _41_ (
    .a1(_16_),
    .a2(_17_),
    .b(_18_),
    .c(_19_),
    .z(_00_)
  );
  nr2v0x05 _42_ (
    .a(H_Count[0]),
    .b(_00_),
    .z(_01_)
  );
  xnr2v0x05 _43_ (
    .a(H_Count[1]),
    .b(H_Count[0]),
    .z(_20_)
  );
  nr2v0x05 _44_ (
    .a(_00_),
    .b(_20_),
    .z(_02_)
  );
  xaoi21v0x05 _45_ (
    .a1(H_Count[1]),
    .a2(H_Count[0]),
    .b(H_Count[2]),
    .z(_21_)
  );
  nr2v0x05 _46_ (
    .a(_00_),
    .b(_21_),
    .z(_03_)
  );
  aoi31v0x05 _47_ (
    .a1(H_Count[2]),
    .a2(H_Count[1]),
    .a3(H_Count[0]),
    .b(H_Count[3]),
    .z(_22_)
  );
  nr3v0x05 _48_ (
    .a(_13_),
    .b(_00_),
    .c(_22_),
    .z(_04_)
  );
  nr2v0x05 _49_ (
    .a(H_Count[4]),
    .b(_13_),
    .z(_23_)
  );
  nr3v0x05 _50_ (
    .a(_14_),
    .b(_00_),
    .c(_23_),
    .z(_05_)
  );
  xnr2v0x05 _51_ (
    .a(H_Count[5]),
    .b(_14_),
    .z(_24_)
  );
  nr2v0x05 _52_ (
    .a(_00_),
    .b(_24_),
    .z(_06_)
  );
  aoi21v0x05 _53_ (
    .a1(H_Count[5]),
    .a2(_14_),
    .b(H_Count[6]),
    .z(_25_)
  );
  an4v0x05 _54_ (
    .a(H_Count[6]),
    .b(H_Count[5]),
    .c(H_Count[4]),
    .d(_13_),
    .z(_26_)
  );
  nd4v0x05 _55_ (
    .a(H_Count[6]),
    .b(H_Count[5]),
    .c(H_Count[4]),
    .d(_13_),
    .z(_27_)
  );
  nr3v0x05 _56_ (
    .a(_00_),
    .b(_25_),
    .c(_26_),
    .z(_07_)
  );
  xnr2v0x05 _57_ (
    .a(H_Count[7]),
    .b(_26_),
    .z(_28_)
  );
  nr2v0x05 _58_ (
    .a(_00_),
    .b(_28_),
    .z(_08_)
  );
  xooi21v0x05 _59_ (
    .a1(_11_),
    .a2(_27_),
    .b(_12_),
    .z(_29_)
  );
  nr2v0x05 _60_ (
    .a(_00_),
    .b(_29_),
    .z(_09_)
  );
  oai31v0x05 _61_ (
    .a1(_11_),
    .a2(_12_),
    .a3(_27_),
    .b(H_Count[9]),
    .z(_30_)
  );
  nr4v1x05 _62_ (
    .a(H_Count[9]),
    .b(_11_),
    .c(_12_),
    .d(_27_),
    .z(_31_)
  );
  aoi21a2v0x05 _63_ (
    .a1(_30_),
    .a2(_31_),
    .b(_00_),
    .z(_10_)
  );
  (* src = "horizontal_counter.v:29.5-39.8" *)
  dfnt1v0x2 _64_ (
    .cp(clk_25MHz),
    .d(_00_),
    .z(enable_V)
  );
  (* src = "horizontal_counter.v:29.5-39.8" *)
  dfnt1v0x2 _65_ (
    .cp(clk_25MHz),
    .d(_01_),
    .z(H_Count[0])
  );
  (* src = "horizontal_counter.v:29.5-39.8" *)
  dfnt1v0x2 _66_ (
    .cp(clk_25MHz),
    .d(_02_),
    .z(H_Count[1])
  );
  (* src = "horizontal_counter.v:29.5-39.8" *)
  dfnt1v0x2 _67_ (
    .cp(clk_25MHz),
    .d(_03_),
    .z(H_Count[2])
  );
  (* src = "horizontal_counter.v:29.5-39.8" *)
  dfnt1v0x2 _68_ (
    .cp(clk_25MHz),
    .d(_04_),
    .z(H_Count[3])
  );
  (* src = "horizontal_counter.v:29.5-39.8" *)
  dfnt1v0x2 _69_ (
    .cp(clk_25MHz),
    .d(_05_),
    .z(H_Count[4])
  );
  (* src = "horizontal_counter.v:29.5-39.8" *)
  dfnt1v0x2 _70_ (
    .cp(clk_25MHz),
    .d(_06_),
    .z(H_Count[5])
  );
  (* src = "horizontal_counter.v:29.5-39.8" *)
  dfnt1v0x2 _71_ (
    .cp(clk_25MHz),
    .d(_07_),
    .z(H_Count[6])
  );
  (* src = "horizontal_counter.v:29.5-39.8" *)
  dfnt1v0x2 _72_ (
    .cp(clk_25MHz),
    .d(_08_),
    .z(H_Count[7])
  );
  (* src = "horizontal_counter.v:29.5-39.8" *)
  dfnt1v0x2 _73_ (
    .cp(clk_25MHz),
    .d(_09_),
    .z(H_Count[8])
  );
  (* src = "horizontal_counter.v:29.5-39.8" *)
  dfnt1v0x2 _74_ (
    .cp(clk_25MHz),
    .d(_10_),
    .z(H_Count[9])
  );
  (* src = "horizontal_counter.v:29.5-39.8" *)
  dfnt1v0x2 _75_ (
    .cp(clk_25MHz),
    .d(1'h0),
    .z(H_Count[10])
  );
  (* src = "horizontal_counter.v:29.5-39.8" *)
  dfnt1v0x2 _76_ (
    .cp(clk_25MHz),
    .d(1'h0),
    .z(H_Count[11])
  );
  (* src = "horizontal_counter.v:29.5-39.8" *)
  dfnt1v0x2 _77_ (
    .cp(clk_25MHz),
    .d(1'h0),
    .z(H_Count[12])
  );
  (* src = "horizontal_counter.v:29.5-39.8" *)
  dfnt1v0x2 _78_ (
    .cp(clk_25MHz),
    .d(1'h0),
    .z(H_Count[13])
  );
  (* src = "horizontal_counter.v:29.5-39.8" *)
  dfnt1v0x2 _79_ (
    .cp(clk_25MHz),
    .d(1'h0),
    .z(H_Count[14])
  );
  (* src = "horizontal_counter.v:29.5-39.8" *)
  dfnt1v0x2 _80_ (
    .cp(clk_25MHz),
    .d(1'h0),
    .z(H_Count[15])
  );
endmodule

(* src = "testbench.v:23.1-35.10" *)
module testbench();
endmodule

(* src = "top.v:23.1-46.10" *)
module top(clk, Hsync, Vsync, Red, Green, Blue);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "top.v:29.14-29.18" *)
  output [3:0] Blue;
  wire [3:0] Blue;
  (* src = "top.v:28.14-28.19" *)
  output [3:0] Green;
  wire [3:0] Green;
  (* src = "top.v:33.13-33.22" *)
  (* unused_bits = "0 1 2 3" *)
  wire [15:0] H_Counter;
  (* src = "top.v:25.8-25.13" *)
  output Hsync;
  wire Hsync;
  (* src = "top.v:27.14-27.17" *)
  output [3:0] Red;
  wire [3:0] Red;
  (* src = "top.v:34.13-34.22" *)
  wire [15:0] V_Counter;
  (* src = "top.v:26.8-26.13" *)
  output Vsync;
  wire Vsync;
  (* src = "top.v:24.7-24.10" *)
  input clk;
  wire clk;
  (* src = "top.v:31.6-31.13" *)
  wire clk_25M;
  (* src = "top.v:32.6-32.14" *)
  wire enable_V;
  or3v0x05 _13_ (
    .a(H_Counter[6]),
    .b(H_Counter[5]),
    .c(H_Counter[4]),
    .z(_00_)
  );
  oai211v0x05 _14_ (
    .a1(H_Counter[7]),
    .a2(_00_),
    .b(H_Counter[9]),
    .c(H_Counter[8]),
    .z(_01_)
  );
  aoi112v0x05 _15_ (
    .a(H_Counter[9]),
    .b(H_Counter[8]),
    .c1(H_Counter[7]),
    .c2(_00_),
    .z(_02_)
  );
  nr4v1x05 _16_ (
    .a(V_Counter[13]),
    .b(V_Counter[12]),
    .c(V_Counter[11]),
    .d(V_Counter[10]),
    .z(_03_)
  );
  nr4v1x05 _17_ (
    .a(H_Counter[11]),
    .b(H_Counter[10]),
    .c(V_Counter[14]),
    .d(V_Counter[15]),
    .z(_04_)
  );
  nr4v1x05 _18_ (
    .a(H_Counter[15]),
    .b(H_Counter[14]),
    .c(H_Counter[13]),
    .d(H_Counter[12]),
    .z(_05_)
  );
  nd3v0x05 _19_ (
    .a(_03_),
    .b(_04_),
    .c(_05_),
    .z(_06_)
  );
  nd3abv0x05 _20_ (
    .a(_06_),
    .b(_02_),
    .c(_01_),
    .z(_07_)
  );
  aoi112v0x05 _21_ (
    .a(V_Counter[4]),
    .b(V_Counter[2]),
    .c1(V_Counter[1]),
    .c2(V_Counter[0]),
    .z(_08_)
  );
  nd2av0x05 _22_ (
    .a(V_Counter[3]),
    .b(_08_),
    .z(_09_)
  );
  or3v0x05 _23_ (
    .a(V_Counter[8]),
    .b(V_Counter[7]),
    .c(V_Counter[6]),
    .z(_10_)
  );
  aoi112v0x05 _24_ (
    .a(V_Counter[9]),
    .b(_10_),
    .c1(_09_),
    .c2(V_Counter[5]),
    .z(_11_)
  );
  or3v0x05 _25_ (
    .a(V_Counter[5]),
    .b(_09_),
    .c(_10_),
    .z(_12_)
  );
  aoi112v0x05 _26_ (
    .a(_07_),
    .b(_11_),
    .c1(_12_),
    .c2(V_Counter[9]),
    .z(Green[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "top.v:37.15-37.43" *)
  clock_divider VGA_Clock_gen (
    .clk(clk),
    .divided_clk(clk_25M)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "top.v:38.20-38.60" *)
  horizontal_counter VGA_Horiz (
    .H_Count(H_Counter),
    .clk_25MHz(clk_25M),
    .enable_V(enable_V)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "top.v:39.18-39.58" *)
  vertical_counter VGA_Verti (
    .V_Count(V_Counter),
    .clk_25MHz(clk_25M),
    .enable_V(enable_V)
  );
  assign Blue = 4'h0;
  assign Green[2:0] = { Green[3], Green[3], Green[3] };
  assign Hsync = 1'hx;
  assign Red = { Green[3], Green[3], Green[3], Green[3] };
  assign Vsync = 1'hx;
endmodule

(* src = "vertical_counter.v:23.1-36.10" *)
module vertical_counter(clk_25MHz, enable_V, V_Count);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  (* init = 16'h0000 *)
  (* src = "vertical_counter.v:26.23-26.30" *)
  output [15:0] V_Count;
  wire [15:0] V_Count;
  (* src = "vertical_counter.v:24.11-24.20" *)
  input clk_25MHz;
  wire clk_25MHz;
  (* src = "vertical_counter.v:25.11-25.19" *)
  input enable_V;
  wire enable_V;
  iv1v0x05 _40_ (
    .a(V_Count[8]),
    .z(_16_)
  );
  iv1v0x05 _41_ (
    .a(V_Count[7]),
    .z(_17_)
  );
  aoi112v0x05 _42_ (
    .a(V_Count[6]),
    .b(V_Count[5]),
    .c1(V_Count[2]),
    .c2(V_Count[3]),
    .z(_18_)
  );
  nr3v0x05 _43_ (
    .a(V_Count[8]),
    .b(V_Count[7]),
    .c(V_Count[4]),
    .z(_19_)
  );
  aon21bv0x05 _44_ (
    .a1(_18_),
    .a2(_19_),
    .b(V_Count[9]),
    .z(_20_)
  );
  or4v0x05 _45_ (
    .a(V_Count[13]),
    .b(V_Count[12]),
    .c(V_Count[11]),
    .d(V_Count[10]),
    .z(_21_)
  );
  nr3v0x05 _46_ (
    .a(V_Count[15]),
    .b(V_Count[14]),
    .c(_21_),
    .z(_22_)
  );
  nd3v0x05 _47_ (
    .a(enable_V),
    .b(_20_),
    .c(_22_),
    .z(_23_)
  );
  mxi2v0x05 _48_ (
    .a0(_23_),
    .a1(enable_V),
    .s(V_Count[0]),
    .z(_00_)
  );
  aoi21bv0x05 _49_ (
    .a1(_20_),
    .a2(_22_),
    .b(enable_V),
    .z(_24_)
  );
  nd3v0x05 _50_ (
    .a(V_Count[0]),
    .b(V_Count[1]),
    .c(enable_V),
    .z(_25_)
  );
  xaoi21v0x05 _51_ (
    .a1(V_Count[0]),
    .a2(enable_V),
    .b(V_Count[1]),
    .z(_26_)
  );
  nr2v0x05 _52_ (
    .a(_24_),
    .b(_26_),
    .z(_01_)
  );
  xor2v0x05 _53_ (
    .a(V_Count[2]),
    .b(_25_),
    .z(_27_)
  );
  nr2v0x05 _54_ (
    .a(_24_),
    .b(_27_),
    .z(_02_)
  );
  an4v0x05 _55_ (
    .a(V_Count[0]),
    .b(V_Count[2]),
    .c(V_Count[3]),
    .d(V_Count[1]),
    .z(_28_)
  );
  aoi21a2v0x05 _56_ (
    .a1(V_Count[2]),
    .a2(_25_),
    .b(V_Count[3]),
    .z(_29_)
  );
  aoi112v0x05 _57_ (
    .a(_24_),
    .b(_29_),
    .c1(_28_),
    .c2(enable_V),
    .z(_03_)
  );
  an2v0x05 _58_ (
    .a(V_Count[4]),
    .b(enable_V),
    .z(_30_)
  );
  aoi21v0x05 _59_ (
    .a1(enable_V),
    .a2(_28_),
    .b(V_Count[4]),
    .z(_31_)
  );
  aoi112v0x05 _60_ (
    .a(_24_),
    .b(_31_),
    .c1(_30_),
    .c2(_28_),
    .z(_04_)
  );
  an3v0x05 _61_ (
    .a(V_Count[5]),
    .b(_28_),
    .c(_30_),
    .z(_32_)
  );
  aoi21v0x05 _62_ (
    .a1(_28_),
    .a2(_30_),
    .b(V_Count[5]),
    .z(_33_)
  );
  nr3v0x05 _63_ (
    .a(_24_),
    .b(_32_),
    .c(_33_),
    .z(_05_)
  );
  nd4v0x05 _64_ (
    .a(V_Count[6]),
    .b(V_Count[5]),
    .c(_28_),
    .d(_30_),
    .z(_34_)
  );
  xnr2v0x05 _65_ (
    .a(V_Count[6]),
    .b(_32_),
    .z(_35_)
  );
  nr2v0x05 _66_ (
    .a(_24_),
    .b(_35_),
    .z(_06_)
  );
  xnr2v0x05 _67_ (
    .a(_17_),
    .b(_34_),
    .z(_36_)
  );
  nr2v0x05 _68_ (
    .a(_24_),
    .b(_36_),
    .z(_07_)
  );
  xooi21v0x05 _69_ (
    .a1(_17_),
    .a2(_34_),
    .b(_16_),
    .z(_37_)
  );
  nr2v0x05 _70_ (
    .a(_24_),
    .b(_37_),
    .z(_08_)
  );
  oai31v0x05 _71_ (
    .a1(_16_),
    .a2(_17_),
    .a3(_34_),
    .b(V_Count[9]),
    .z(_38_)
  );
  nr4v1x05 _72_ (
    .a(V_Count[9]),
    .b(_16_),
    .c(_17_),
    .d(_34_),
    .z(_39_)
  );
  aoi21a2v0x05 _73_ (
    .a1(_38_),
    .a2(_39_),
    .b(_24_),
    .z(_09_)
  );
  nr2av0x1 _74_ (
    .a(V_Count[10]),
    .b(enable_V),
    .z(_10_)
  );
  nr2av0x1 _75_ (
    .a(V_Count[11]),
    .b(enable_V),
    .z(_11_)
  );
  nr2av0x1 _76_ (
    .a(V_Count[12]),
    .b(enable_V),
    .z(_12_)
  );
  nr2av0x1 _77_ (
    .a(V_Count[13]),
    .b(enable_V),
    .z(_13_)
  );
  nr2av0x1 _78_ (
    .a(V_Count[14]),
    .b(enable_V),
    .z(_14_)
  );
  nr2av0x1 _79_ (
    .a(V_Count[15]),
    .b(enable_V),
    .z(_15_)
  );
  (* src = "vertical_counter.v:29.5-35.9" *)
  dfnt1v0x2 _80_ (
    .cp(clk_25MHz),
    .d(_00_),
    .z(V_Count[0])
  );
  (* src = "vertical_counter.v:29.5-35.9" *)
  dfnt1v0x2 _81_ (
    .cp(clk_25MHz),
    .d(_01_),
    .z(V_Count[1])
  );
  (* src = "vertical_counter.v:29.5-35.9" *)
  dfnt1v0x2 _82_ (
    .cp(clk_25MHz),
    .d(_02_),
    .z(V_Count[2])
  );
  (* src = "vertical_counter.v:29.5-35.9" *)
  dfnt1v0x2 _83_ (
    .cp(clk_25MHz),
    .d(_03_),
    .z(V_Count[3])
  );
  (* src = "vertical_counter.v:29.5-35.9" *)
  dfnt1v0x2 _84_ (
    .cp(clk_25MHz),
    .d(_04_),
    .z(V_Count[4])
  );
  (* src = "vertical_counter.v:29.5-35.9" *)
  dfnt1v0x2 _85_ (
    .cp(clk_25MHz),
    .d(_05_),
    .z(V_Count[5])
  );
  (* src = "vertical_counter.v:29.5-35.9" *)
  dfnt1v0x2 _86_ (
    .cp(clk_25MHz),
    .d(_06_),
    .z(V_Count[6])
  );
  (* src = "vertical_counter.v:29.5-35.9" *)
  dfnt1v0x2 _87_ (
    .cp(clk_25MHz),
    .d(_07_),
    .z(V_Count[7])
  );
  (* src = "vertical_counter.v:29.5-35.9" *)
  dfnt1v0x2 _88_ (
    .cp(clk_25MHz),
    .d(_08_),
    .z(V_Count[8])
  );
  (* src = "vertical_counter.v:29.5-35.9" *)
  dfnt1v0x2 _89_ (
    .cp(clk_25MHz),
    .d(_09_),
    .z(V_Count[9])
  );
  (* src = "vertical_counter.v:29.5-35.9" *)
  dfnt1v0x2 _90_ (
    .cp(clk_25MHz),
    .d(_10_),
    .z(V_Count[10])
  );
  (* src = "vertical_counter.v:29.5-35.9" *)
  dfnt1v0x2 _91_ (
    .cp(clk_25MHz),
    .d(_11_),
    .z(V_Count[11])
  );
  (* src = "vertical_counter.v:29.5-35.9" *)
  dfnt1v0x2 _92_ (
    .cp(clk_25MHz),
    .d(_12_),
    .z(V_Count[12])
  );
  (* src = "vertical_counter.v:29.5-35.9" *)
  dfnt1v0x2 _93_ (
    .cp(clk_25MHz),
    .d(_13_),
    .z(V_Count[13])
  );
  (* src = "vertical_counter.v:29.5-35.9" *)
  dfnt1v0x2 _94_ (
    .cp(clk_25MHz),
    .d(_14_),
    .z(V_Count[14])
  );
  (* src = "vertical_counter.v:29.5-35.9" *)
  dfnt1v0x2 _95_ (
    .cp(clk_25MHz),
    .d(_15_),
    .z(V_Count[15])
  );
endmodule
