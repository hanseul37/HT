/* Generated by Yosys 0.32+74 (git sha1 b739213d9, x86_64-w64-mingw32-g++ 9.2.1 -Os) */

(* dynports =  1  *)
(* hdlname = "\\clock_divider" *)
(* src = "clock_divider.v:4.1-17.10" *)
module \$paramod\clock_divider\DIV_N=s32'00000000000000000000000000000010 (clk_in, clk_out, do_reset, is_ready);
  wire _0_;
  wire _1_;
  wire _2_;
  (* src = "clock_divider.v:4.62-4.68" *)
  input clk_in;
  wire clk_in;
  (* src = "clock_divider.v:4.82-4.89" *)
  output clk_out;
  wire clk_out;
  (* src = "clock_divider.v:6.18-6.28" *)
  wire [1:0] divcounter;
  (* src = "clock_divider.v:4.102-4.110" *)
  input do_reset;
  wire do_reset;
  (* src = "clock_divider.v:4.123-4.131" *)
  output is_ready;
  wire is_ready;
  nr2v0x05 _3_ (
    .a(divcounter[0]),
    .b(do_reset),
    .z(_0_)
  );
  xnr2v0x05 _4_ (
    .a(divcounter[0]),
    .b(divcounter[1]),
    .z(_2_)
  );
  nr2v0x05 _5_ (
    .a(do_reset),
    .b(_2_),
    .z(_1_)
  );
  (* src = "clock_divider.v:8.2-13.39" *)
  dfnt1v0x2 _6_ (
    .cp(clk_in),
    .d(_0_),
    .z(divcounter[0])
  );
  (* src = "clock_divider.v:8.2-13.39" *)
  dfnt1v0x2 _7_ (
    .cp(clk_in),
    .d(_1_),
    .z(divcounter[1])
  );
  assign clk_out = divcounter[1];
  assign is_ready = 1'h1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\spi_module" *)
(* src = "spi_module.v:9.1-143.10" *)
module \$paramod\spi_module\SPI_MASTER=1'0 (master_clock, SCLK_OUT, SCLK_IN, SS_OUT, SS_IN, OUTPUT_SIGNAL, processing_word, process_next_word, data_word_send, INPUT_SIGNAL, data_word_recv, do_reset, is_ready);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  (* src = "spi_module.v:25.13-25.25" *)
  input INPUT_SIGNAL;
  wire INPUT_SIGNAL;
  (* src = "spi_module.v:21.14-21.27" *)
  output OUTPUT_SIGNAL;
  wire OUTPUT_SIGNAL;
  (* src = "spi_module.v:18.13-18.20" *)
  input SCLK_IN;
  wire SCLK_IN;
  (* src = "spi_module.v:17.14-17.22" *)
  output SCLK_OUT;
  wire SCLK_OUT;
  (* src = "spi_module.v:73.7-73.9" *)
  wire SS;
  (* src = "spi_module.v:20.13-20.18" *)
  input SS_IN;
  wire SS_IN;
  (* src = "spi_module.v:19.14-19.20" *)
  output SS_OUT;
  wire SS_OUT;
  (* src = "spi_module.v:32.6-32.17" *)
  wire activate_ss;
  (* src = "spi_module.v:42.27-42.38" *)
  wire [7:1] bit_counter;
  (* src = "spi_module.v:26.35-26.49" *)
  output [7:0] data_word_recv;
  wire [7:0] data_word_recv;
  (* src = "spi_module.v:40.27-40.45" *)
  wire [7:0] data_word_recv_reg;
  (* src = "spi_module.v:24.34-24.48" *)
  input [7:0] data_word_send;
  wire [7:0] data_word_send;
  (* src = "spi_module.v:27.13-27.21" *)
  input do_reset;
  wire do_reset;
  (* src = "spi_module.v:38.7-38.24" *)
  wire falling_sclk_edge;
  (* src = "spi_module.v:69.7-69.22" *)
  wire get_number_edge;
  (* src = "spi_module.v:28.14-28.22" *)
  output is_ready;
  wire is_ready;
  (* src = "spi_module.v:31.6-31.18" *)
  wire is_ready_reg;
  (* src = "spi_module.v:16.15-16.27" *)
  input master_clock;
  wire master_clock;
  (* src = "spi_module.v:23.13-23.30" *)
  input process_next_word;
  wire process_next_word;
  (* src = "spi_module.v:22.14-22.29" *)
  output processing_word;
  wire processing_word;
  (* src = "spi_module.v:37.7-37.23" *)
  wire rising_sclk_edge;
  (* onehot = 32'd1 *)
  wire [1:0] spi_status;
  (* src = "spi_module.v:71.7-71.25" *)
  wire switch_number_edge;
  iv1v0x05 _087_ (
    .a(bit_counter[7]),
    .z(_046_)
  );
  iv1v0x05 _088_ (
    .a(bit_counter[6]),
    .z(_047_)
  );
  iv1v0x05 _089_ (
    .a(bit_counter[5]),
    .z(_048_)
  );
  iv1v0x05 _090_ (
    .a(bit_counter[1]),
    .z(_049_)
  );
  iv1v0x05 _091_ (
    .a(spi_status[0]),
    .z(processing_word)
  );
  iv1v0x05 _092_ (
    .a(do_reset),
    .z(_050_)
  );
  iv1v0x05 _093_ (
    .a(data_word_recv_reg[3]),
    .z(_051_)
  );
  nr2av0x1 _094_ (
    .a(process_next_word),
    .b(SCLK_IN),
    .z(_052_)
  );
  an2v0x05 _095_ (
    .a(spi_status[0]),
    .b(_052_),
    .z(_053_)
  );
  nr2av0x1 _096_ (
    .a(falling_sclk_edge),
    .b(SS_IN),
    .z(_054_)
  );
  nr3v0x05 _097_ (
    .a(bit_counter[3]),
    .b(bit_counter[2]),
    .c(bit_counter[1]),
    .z(_055_)
  );
  nr4v1x05 _098_ (
    .a(bit_counter[4]),
    .b(bit_counter[3]),
    .c(bit_counter[2]),
    .d(bit_counter[1]),
    .z(_056_)
  );
  nd2v0x05 _099_ (
    .a(_048_),
    .b(_056_),
    .z(_057_)
  );
  an4v0x05 _100_ (
    .a(_046_),
    .b(_047_),
    .c(_048_),
    .d(_056_),
    .z(_058_)
  );
  aoi21bv0x05 _101_ (
    .a1(_054_),
    .a2(_058_),
    .b(spi_status[1]),
    .z(_059_)
  );
  oan21bv0x05 _102_ (
    .a1(_053_),
    .a2(_059_),
    .b(do_reset),
    .z(_001_)
  );
  an2v0x05 _103_ (
    .a(spi_status[1]),
    .b(_054_),
    .z(_060_)
  );
  nd2v0x05 _104_ (
    .a(spi_status[1]),
    .b(_054_),
    .z(_061_)
  );
  aoi21v0x05 _105_ (
    .a1(_058_),
    .a2(_060_),
    .b(do_reset),
    .z(_062_)
  );
  oai21v0x05 _106_ (
    .a1(processing_word),
    .a2(_052_),
    .b(_062_),
    .z(_000_)
  );
  mxi2v0x05 _107_ (
    .a0(data_word_send[6]),
    .a1(data_word_send[7]),
    .s(bit_counter[1]),
    .z(_063_)
  );
  mxi2v0x05 _108_ (
    .a0(data_word_send[4]),
    .a1(data_word_send[5]),
    .s(bit_counter[1]),
    .z(_064_)
  );
  mxi2v0x05 _109_ (
    .a0(_064_),
    .a1(_063_),
    .s(bit_counter[2]),
    .z(_065_)
  );
  mxi2v0x05 _110_ (
    .a0(data_word_send[2]),
    .a1(data_word_send[3]),
    .s(bit_counter[1]),
    .z(_066_)
  );
  mxi2v0x05 _111_ (
    .a0(data_word_send[0]),
    .a1(data_word_send[1]),
    .s(bit_counter[1]),
    .z(_067_)
  );
  mxi2v0x05 _112_ (
    .a0(_067_),
    .a1(_066_),
    .s(bit_counter[2]),
    .z(_068_)
  );
  mxn2v0x05 _113_ (
    .a0(_068_),
    .a1(_065_),
    .s(bit_counter[3]),
    .z(_069_)
  );
  an2v0x05 _114_ (
    .a(activate_ss),
    .b(_069_),
    .z(OUTPUT_SIGNAL)
  );
  nr2v0x05 _115_ (
    .a(do_reset),
    .b(SS_IN),
    .z(_070_)
  );
  an3v0x05 _116_ (
    .a(spi_status[1]),
    .b(rising_sclk_edge),
    .c(_070_),
    .z(_071_)
  );
  nd3v0x05 _117_ (
    .a(spi_status[1]),
    .b(rising_sclk_edge),
    .c(_070_),
    .z(_072_)
  );
  aon21bv0x05 _118_ (
    .a1(_058_),
    .a2(_071_),
    .b(data_word_recv_reg[0]),
    .z(_073_)
  );
  nr2v0x05 _119_ (
    .a(bit_counter[7]),
    .b(bit_counter[6]),
    .z(_074_)
  );
  oai211v0x05 _120_ (
    .a1(_048_),
    .a2(_056_),
    .b(_074_),
    .c(INPUT_SIGNAL),
    .z(_075_)
  );
  xnr2v0x05 _121_ (
    .a(_048_),
    .b(_056_),
    .z(_076_)
  );
  nd2v0x05 _122_ (
    .a(_071_),
    .b(_076_),
    .z(_077_)
  );
  oai21v0x05 _123_ (
    .a1(_075_),
    .a2(_077_),
    .b(_073_),
    .z(_002_)
  );
  xor2v0x05 _124_ (
    .a(bit_counter[2]),
    .b(bit_counter[1]),
    .z(_078_)
  );
  xnai21v2x05 _125_ (
    .a1(bit_counter[5]),
    .a2(_056_),
    .b(_074_),
    .z(_079_)
  );
  nd3abv0x05 _126_ (
    .a(_079_),
    .b(bit_counter[2]),
    .c(bit_counter[1]),
    .z(_080_)
  );
  xor2v0x05 _127_ (
    .a(bit_counter[4]),
    .b(_055_),
    .z(_081_)
  );
  oai21v0x05 _128_ (
    .a1(bit_counter[2]),
    .a2(bit_counter[1]),
    .b(bit_counter[3]),
    .z(_082_)
  );
  xooi21v0x05 _129_ (
    .a1(bit_counter[2]),
    .a2(bit_counter[1]),
    .b(bit_counter[3]),
    .z(_083_)
  );
  nd3abv0x05 _130_ (
    .a(bit_counter[4]),
    .b(_055_),
    .c(_082_),
    .z(_084_)
  );
  or2v0x05 _131_ (
    .a(_072_),
    .b(_084_),
    .z(_085_)
  );
  oai21v0x05 _132_ (
    .a1(_080_),
    .a2(_085_),
    .b(data_word_recv_reg[1]),
    .z(_086_)
  );
  nr2v0x05 _133_ (
    .a(_075_),
    .b(_076_),
    .z(_018_)
  );
  nd4v0x05 _134_ (
    .a(bit_counter[1]),
    .b(_071_),
    .c(_078_),
    .d(_018_),
    .z(_019_)
  );
  oai21v0x05 _135_ (
    .a1(_084_),
    .a2(_019_),
    .b(_086_),
    .z(_003_)
  );
  nd3abv0x05 _136_ (
    .a(bit_counter[1]),
    .b(_079_),
    .c(bit_counter[2]),
    .z(_020_)
  );
  oai21v0x05 _137_ (
    .a1(_085_),
    .a2(_020_),
    .b(data_word_recv_reg[2]),
    .z(_021_)
  );
  nd2v0x05 _138_ (
    .a(_049_),
    .b(_018_),
    .z(_022_)
  );
  nd3v0x05 _139_ (
    .a(bit_counter[2]),
    .b(_049_),
    .c(_018_),
    .z(_023_)
  );
  oai21v0x05 _140_ (
    .a1(_085_),
    .a2(_023_),
    .b(_021_),
    .z(_004_)
  );
  or4v0x05 _141_ (
    .a(_049_),
    .b(_075_),
    .c(_076_),
    .d(_078_),
    .z(_024_)
  );
  nd3abv0x05 _142_ (
    .a(_078_),
    .b(_079_),
    .c(bit_counter[1]),
    .z(_025_)
  );
  nr4v1x05 _143_ (
    .a(_049_),
    .b(_078_),
    .c(_079_),
    .d(_084_),
    .z(_026_)
  );
  oai22v0x05 _144_ (
    .a1(_084_),
    .a2(_024_),
    .b1(_026_),
    .b2(_051_),
    .z(_027_)
  );
  mxn2v0x05 _145_ (
    .a0(data_word_recv_reg[3]),
    .a1(_027_),
    .s(_071_),
    .z(_005_)
  );
  nd3abv0x05 _146_ (
    .a(_078_),
    .b(_084_),
    .c(_071_),
    .z(_028_)
  );
  oai31v0x05 _147_ (
    .a1(bit_counter[1]),
    .a2(_079_),
    .a3(_028_),
    .b(data_word_recv_reg[4]),
    .z(_029_)
  );
  oai21v0x05 _148_ (
    .a1(_022_),
    .a2(_028_),
    .b(_029_),
    .z(_006_)
  );
  xnai21v2x05 _149_ (
    .a1(bit_counter[4]),
    .a2(_055_),
    .b(_083_),
    .z(_030_)
  );
  or2v0x05 _150_ (
    .a(_072_),
    .b(_030_),
    .z(_031_)
  );
  oai21v0x05 _151_ (
    .a1(_080_),
    .a2(_031_),
    .b(data_word_recv_reg[5]),
    .z(_032_)
  );
  oai21v0x05 _152_ (
    .a1(_019_),
    .a2(_030_),
    .b(_032_),
    .z(_007_)
  );
  oai21v0x05 _153_ (
    .a1(_020_),
    .a2(_031_),
    .b(data_word_recv_reg[6]),
    .z(_033_)
  );
  oai21v0x05 _154_ (
    .a1(_023_),
    .a2(_031_),
    .b(_033_),
    .z(_008_)
  );
  oai21v0x05 _155_ (
    .a1(_025_),
    .a2(_031_),
    .b(data_word_recv_reg[7]),
    .z(_034_)
  );
  oai21v0x05 _156_ (
    .a1(_024_),
    .a2(_031_),
    .b(_034_),
    .z(_009_)
  );
  aoi21v0x05 _157_ (
    .a1(processing_word),
    .a2(spi_status[1]),
    .b(_053_),
    .z(_035_)
  );
  oai21v0x05 _158_ (
    .a1(_059_),
    .a2(_035_),
    .b(activate_ss),
    .z(_036_)
  );
  nd2av0x05 _159_ (
    .a(spi_status[1]),
    .b(_053_),
    .z(_037_)
  );
  aoi21v0x05 _160_ (
    .a1(_036_),
    .a2(_037_),
    .b(do_reset),
    .z(_010_)
  );
  xnai21v2x05 _161_ (
    .a1(bit_counter[1]),
    .a2(_060_),
    .b(_050_),
    .z(_011_)
  );
  nd2v0x05 _162_ (
    .a(_060_),
    .b(_078_),
    .z(_038_)
  );
  oai21v0x05 _163_ (
    .a1(bit_counter[2]),
    .a2(_060_),
    .b(_038_),
    .z(_039_)
  );
  nd2v0x05 _164_ (
    .a(_050_),
    .b(_039_),
    .z(_012_)
  );
  mxi2v0x05 _165_ (
    .a0(bit_counter[3]),
    .a1(_083_),
    .s(_060_),
    .z(_040_)
  );
  nd2v0x05 _166_ (
    .a(_050_),
    .b(_040_),
    .z(_013_)
  );
  nr2v0x05 _167_ (
    .a(_058_),
    .b(_061_),
    .z(_041_)
  );
  aoi22v0x05 _168_ (
    .a1(bit_counter[4]),
    .a2(_061_),
    .b1(_081_),
    .b2(_041_),
    .z(_042_)
  );
  nr2v0x05 _169_ (
    .a(do_reset),
    .b(_042_),
    .z(_014_)
  );
  aoi22v0x05 _170_ (
    .a1(bit_counter[5]),
    .a2(_061_),
    .b1(_076_),
    .b2(_041_),
    .z(_043_)
  );
  nr2v0x05 _171_ (
    .a(do_reset),
    .b(_043_),
    .z(_015_)
  );
  nr3v0x05 _172_ (
    .a(bit_counter[6]),
    .b(_057_),
    .c(_061_),
    .z(_044_)
  );
  xooi21v0x05 _173_ (
    .a1(_057_),
    .a2(_061_),
    .b(bit_counter[6]),
    .z(_045_)
  );
  an2v0x05 _174_ (
    .a(_062_),
    .b(_045_),
    .z(_016_)
  );
  nr3v0x05 _175_ (
    .a(_046_),
    .b(do_reset),
    .c(_044_),
    .z(_017_)
  );
  dfnt1v0x2 _176_ (
    .cp(master_clock),
    .d(_000_),
    .z(spi_status[0])
  );
  dfnt1v0x2 _177_ (
    .cp(master_clock),
    .d(_001_),
    .z(spi_status[1])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _178_ (
    .cp(master_clock),
    .d(_002_),
    .z(data_word_recv_reg[0])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _179_ (
    .cp(master_clock),
    .d(_003_),
    .z(data_word_recv_reg[1])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _180_ (
    .cp(master_clock),
    .d(_004_),
    .z(data_word_recv_reg[2])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _181_ (
    .cp(master_clock),
    .d(_005_),
    .z(data_word_recv_reg[3])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _182_ (
    .cp(master_clock),
    .d(_006_),
    .z(data_word_recv_reg[4])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _183_ (
    .cp(master_clock),
    .d(_007_),
    .z(data_word_recv_reg[5])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _184_ (
    .cp(master_clock),
    .d(_008_),
    .z(data_word_recv_reg[6])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _185_ (
    .cp(master_clock),
    .d(_009_),
    .z(data_word_recv_reg[7])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _186_ (
    .cp(master_clock),
    .d(_010_),
    .z(activate_ss)
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _187_ (
    .cp(master_clock),
    .d(_011_),
    .z(bit_counter[1])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _188_ (
    .cp(master_clock),
    .d(_012_),
    .z(bit_counter[2])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _189_ (
    .cp(master_clock),
    .d(_013_),
    .z(bit_counter[3])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _190_ (
    .cp(master_clock),
    .d(_014_),
    .z(bit_counter[4])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _191_ (
    .cp(master_clock),
    .d(_015_),
    .z(bit_counter[5])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _192_ (
    .cp(master_clock),
    .d(_016_),
    .z(bit_counter[6])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _193_ (
    .cp(master_clock),
    .d(_017_),
    .z(bit_counter[7])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "spi_module.v:65.15-65.87" *)
  neg_edge_det spi_edge_neg (
    .clk(master_clock),
    .ne(falling_sclk_edge),
    .sig(SCLK_IN)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "spi_module.v:64.15-64.86" *)
  pos_edge_det spi_edge_pos (
    .clk(master_clock),
    .pe(rising_sclk_edge),
    .sig(SCLK_IN)
  );
  assign SCLK_OUT = 1'hx;
  assign SS = SS_IN;
  assign SS_OUT = 1'hx;
  assign data_word_recv = data_word_recv_reg;
  assign get_number_edge = rising_sclk_edge;
  assign is_ready = 1'h1;
  assign is_ready_reg = 1'h1;
  assign switch_number_edge = falling_sclk_edge;
endmodule

(* dynports =  1  *)
(* hdlname = "\\spi_module" *)
(* src = "spi_module.v:9.1-143.10" *)
module \$paramod\spi_module\SPI_MASTER=1'1 (master_clock, SCLK_OUT, SCLK_IN, SS_OUT, SS_IN, OUTPUT_SIGNAL, processing_word, process_next_word, data_word_send, INPUT_SIGNAL, data_word_recv, do_reset, is_ready);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  (* src = "spi_module.v:25.13-25.25" *)
  input INPUT_SIGNAL;
  wire INPUT_SIGNAL;
  (* src = "spi_module.v:21.14-21.27" *)
  output OUTPUT_SIGNAL;
  wire OUTPUT_SIGNAL;
  (* src = "spi_module.v:18.13-18.20" *)
  input SCLK_IN;
  wire SCLK_IN;
  (* src = "spi_module.v:17.14-17.22" *)
  output SCLK_OUT;
  wire SCLK_OUT;
  (* src = "spi_module.v:73.7-73.9" *)
  wire SS;
  (* src = "spi_module.v:20.13-20.18" *)
  input SS_IN;
  wire SS_IN;
  (* src = "spi_module.v:19.14-19.20" *)
  output SS_OUT;
  wire SS_OUT;
  (* src = "spi_module.v:33.6-33.19" *)
  wire activate_sclk;
  (* src = "spi_module.v:32.6-32.17" *)
  wire activate_ss;
  (* src = "spi_module.v:42.27-42.38" *)
  wire [7:1] bit_counter;
  (* src = "spi_module.v:26.35-26.49" *)
  output [7:0] data_word_recv;
  wire [7:0] data_word_recv;
  (* src = "spi_module.v:40.27-40.45" *)
  wire [7:0] data_word_recv_reg;
  (* src = "spi_module.v:24.34-24.48" *)
  input [7:0] data_word_send;
  wire [7:0] data_word_send;
  (* src = "spi_module.v:27.13-27.21" *)
  input do_reset;
  wire do_reset;
  (* src = "spi_module.v:38.7-38.24" *)
  wire falling_sclk_edge;
  (* src = "spi_module.v:69.7-69.22" *)
  wire get_number_edge;
  (* src = "spi_module.v:28.14-28.22" *)
  output is_ready;
  wire is_ready;
  (* src = "spi_module.v:31.6-31.18" *)
  wire is_ready_reg;
  (* src = "spi_module.v:16.15-16.27" *)
  input master_clock;
  wire master_clock;
  (* src = "spi_module.v:23.13-23.30" *)
  input process_next_word;
  wire process_next_word;
  (* src = "spi_module.v:22.14-22.29" *)
  output processing_word;
  wire processing_word;
  (* src = "spi_module.v:37.7-37.23" *)
  wire rising_sclk_edge;
  (* onehot = 32'd1 *)
  wire [1:0] spi_status;
  (* src = "spi_module.v:71.7-71.25" *)
  wire switch_number_edge;
  iv1v0x05 _086_ (
    .a(bit_counter[5]),
    .z(_053_)
  );
  iv1v0x05 _087_ (
    .a(bit_counter[1]),
    .z(_054_)
  );
  iv1v0x05 _088_ (
    .a(activate_ss),
    .z(SS_OUT)
  );
  iv1v0x05 _089_ (
    .a(spi_status[1]),
    .z(_055_)
  );
  iv1v0x05 _090_ (
    .a(spi_status[0]),
    .z(processing_word)
  );
  iv1v0x05 _091_ (
    .a(do_reset),
    .z(_056_)
  );
  an2v0x05 _092_ (
    .a(activate_ss),
    .b(falling_sclk_edge),
    .z(_057_)
  );
  nd2av0x05 _093_ (
    .a(do_reset),
    .b(spi_status[1]),
    .z(_058_)
  );
  nr3v0x05 _094_ (
    .a(bit_counter[3]),
    .b(bit_counter[2]),
    .c(bit_counter[1]),
    .z(_059_)
  );
  nr4v1x05 _095_ (
    .a(bit_counter[4]),
    .b(bit_counter[3]),
    .c(bit_counter[2]),
    .d(bit_counter[1]),
    .z(_060_)
  );
  nd2v0x05 _096_ (
    .a(_053_),
    .b(_060_),
    .z(_061_)
  );
  nr2v0x05 _097_ (
    .a(bit_counter[7]),
    .b(bit_counter[6]),
    .z(_062_)
  );
  nr3abv0x05 _098_ (
    .a(_060_),
    .b(_062_),
    .c(bit_counter[5]),
    .z(_063_)
  );
  nd2v0x05 _099_ (
    .a(spi_status[1]),
    .b(_057_),
    .z(_064_)
  );
  nr2v0x05 _100_ (
    .a(_063_),
    .b(_064_),
    .z(_065_)
  );
  nr3abv0x05 _101_ (
    .a(spi_status[0]),
    .b(process_next_word),
    .c(SCLK_IN),
    .z(_066_)
  );
  oai21v0x05 _102_ (
    .a1(_065_),
    .a2(_066_),
    .b(_056_),
    .z(_067_)
  );
  oai21v0x05 _103_ (
    .a1(_057_),
    .a2(_058_),
    .b(_067_),
    .z(_001_)
  );
  nd2v0x05 _104_ (
    .a(falling_sclk_edge),
    .b(_063_),
    .z(_068_)
  );
  nd3v0x05 _105_ (
    .a(activate_ss),
    .b(falling_sclk_edge),
    .c(_063_),
    .z(_069_)
  );
  oai21a2v0x05 _106_ (
    .a1(SCLK_IN),
    .a2(process_next_word),
    .b(spi_status[0]),
    .z(_070_)
  );
  oai211v0x05 _107_ (
    .a1(_055_),
    .a2(_069_),
    .b(_070_),
    .c(_056_),
    .z(_000_)
  );
  mxi2v0x05 _108_ (
    .a0(data_word_send[6]),
    .a1(data_word_send[7]),
    .s(bit_counter[1]),
    .z(_071_)
  );
  mxi2v0x05 _109_ (
    .a0(data_word_send[4]),
    .a1(data_word_send[5]),
    .s(bit_counter[1]),
    .z(_072_)
  );
  mxi2v0x05 _110_ (
    .a0(_072_),
    .a1(_071_),
    .s(bit_counter[2]),
    .z(_073_)
  );
  mxi2v0x05 _111_ (
    .a0(data_word_send[2]),
    .a1(data_word_send[3]),
    .s(bit_counter[1]),
    .z(_074_)
  );
  mxi2v0x05 _112_ (
    .a0(data_word_send[0]),
    .a1(data_word_send[1]),
    .s(bit_counter[1]),
    .z(_075_)
  );
  mxi2v0x05 _113_ (
    .a0(_075_),
    .a1(_074_),
    .s(bit_counter[2]),
    .z(_076_)
  );
  mxi2v0x05 _114_ (
    .a0(_076_),
    .a1(_073_),
    .s(bit_counter[3]),
    .z(_077_)
  );
  nr2v0x05 _115_ (
    .a(SS_OUT),
    .b(_077_),
    .z(OUTPUT_SIGNAL)
  );
  an2v0x05 _116_ (
    .a(activate_sclk),
    .b(SCLK_IN),
    .z(SCLK_OUT)
  );
  oai21v0x05 _117_ (
    .a1(spi_status[1]),
    .a2(spi_status[0]),
    .b(_070_),
    .z(_078_)
  );
  oai21v0x05 _118_ (
    .a1(_068_),
    .a2(_078_),
    .b(activate_ss),
    .z(_079_)
  );
  nd3v0x05 _119_ (
    .a(_055_),
    .b(spi_status[0]),
    .c(_070_),
    .z(_080_)
  );
  aoi21v0x05 _120_ (
    .a1(_079_),
    .a2(_080_),
    .b(do_reset),
    .z(_002_)
  );
  aoi31v0x05 _121_ (
    .a1(activate_ss),
    .a2(falling_sclk_edge),
    .a3(_063_),
    .b(_055_),
    .z(_081_)
  );
  oai21v0x05 _122_ (
    .a1(_078_),
    .a2(_081_),
    .b(activate_sclk),
    .z(_082_)
  );
  aoi21v0x05 _123_ (
    .a1(_080_),
    .a2(_082_),
    .b(do_reset),
    .z(_003_)
  );
  xnai21v2x05 _124_ (
    .a1(_054_),
    .a2(_064_),
    .b(_056_),
    .z(_004_)
  );
  xor2v0x05 _125_ (
    .a(bit_counter[2]),
    .b(bit_counter[1]),
    .z(_083_)
  );
  xoon21v0x05 _126_ (
    .a1(bit_counter[1]),
    .a2(_064_),
    .b(bit_counter[2]),
    .z(_084_)
  );
  nd2v0x05 _127_ (
    .a(_056_),
    .b(_084_),
    .z(_005_)
  );
  xooi21v0x05 _128_ (
    .a1(bit_counter[2]),
    .a2(bit_counter[1]),
    .b(bit_counter[3]),
    .z(_085_)
  );
  mxi2v0x05 _129_ (
    .a0(_085_),
    .a1(bit_counter[3]),
    .s(_064_),
    .z(_019_)
  );
  nd2v0x05 _130_ (
    .a(_056_),
    .b(_019_),
    .z(_006_)
  );
  xnr2v0x05 _131_ (
    .a(bit_counter[4]),
    .b(_059_),
    .z(_020_)
  );
  iv1v0x05 _132_ (
    .a(_020_),
    .z(_021_)
  );
  aoi22v0x05 _133_ (
    .a1(bit_counter[4]),
    .a2(_064_),
    .b1(_065_),
    .b2(_021_),
    .z(_022_)
  );
  nr2v0x05 _134_ (
    .a(do_reset),
    .b(_022_),
    .z(_007_)
  );
  xnr2v0x05 _135_ (
    .a(_053_),
    .b(_060_),
    .z(_023_)
  );
  aoi22v0x05 _136_ (
    .a1(bit_counter[5]),
    .a2(_064_),
    .b1(_065_),
    .b2(_023_),
    .z(_024_)
  );
  nr2v0x05 _137_ (
    .a(do_reset),
    .b(_024_),
    .z(_008_)
  );
  nr3v0x05 _138_ (
    .a(bit_counter[6]),
    .b(_061_),
    .c(_064_),
    .z(_025_)
  );
  nd2v0x05 _139_ (
    .a(bit_counter[7]),
    .b(_025_),
    .z(_026_)
  );
  oai21v0x05 _140_ (
    .a1(_061_),
    .a2(_064_),
    .b(bit_counter[6]),
    .z(_027_)
  );
  aoi21v0x05 _141_ (
    .a1(_026_),
    .a2(_027_),
    .b(do_reset),
    .z(_009_)
  );
  nr3abv0x05 _142_ (
    .a(bit_counter[7]),
    .b(_056_),
    .c(_025_),
    .z(_010_)
  );
  nr3abv0x05 _143_ (
    .a(activate_ss),
    .b(rising_sclk_edge),
    .c(_058_),
    .z(_028_)
  );
  aon21bv0x05 _144_ (
    .a1(_063_),
    .a2(_028_),
    .b(data_word_recv_reg[0]),
    .z(_029_)
  );
  oai211v0x05 _145_ (
    .a1(_053_),
    .a2(_060_),
    .b(_062_),
    .c(INPUT_SIGNAL),
    .z(_030_)
  );
  nd2v0x05 _146_ (
    .a(_023_),
    .b(_028_),
    .z(_031_)
  );
  oai21v0x05 _147_ (
    .a1(_030_),
    .a2(_031_),
    .b(_029_),
    .z(_011_)
  );
  xnai21v2x05 _148_ (
    .a1(bit_counter[5]),
    .a2(_060_),
    .b(_062_),
    .z(_032_)
  );
  nr3abv0x05 _149_ (
    .a(bit_counter[1]),
    .b(_062_),
    .c(bit_counter[5]),
    .z(_033_)
  );
  nd2v0x05 _150_ (
    .a(_083_),
    .b(_033_),
    .z(_034_)
  );
  nd3av0x05 _151_ (
    .a(_085_),
    .b(_020_),
    .c(_028_),
    .z(_035_)
  );
  oai21v0x05 _152_ (
    .a1(_034_),
    .a2(_035_),
    .b(data_word_recv_reg[1]),
    .z(_036_)
  );
  nr2v0x05 _153_ (
    .a(_023_),
    .b(_030_),
    .z(_037_)
  );
  nd2v0x05 _154_ (
    .a(bit_counter[1]),
    .b(_037_),
    .z(_038_)
  );
  nd4v0x05 _155_ (
    .a(bit_counter[1]),
    .b(_083_),
    .c(_028_),
    .d(_037_),
    .z(_039_)
  );
  oai31v0x05 _156_ (
    .a1(_085_),
    .a2(_021_),
    .a3(_039_),
    .b(_036_),
    .z(_012_)
  );
  nd2av0x05 _157_ (
    .a(_032_),
    .b(_054_),
    .z(_040_)
  );
  nd3abv0x05 _158_ (
    .a(bit_counter[1]),
    .b(_032_),
    .c(bit_counter[2]),
    .z(_041_)
  );
  oai21v0x05 _159_ (
    .a1(_035_),
    .a2(_041_),
    .b(data_word_recv_reg[2]),
    .z(_042_)
  );
  nd2v0x05 _160_ (
    .a(_054_),
    .b(_037_),
    .z(_043_)
  );
  nd3v0x05 _161_ (
    .a(bit_counter[2]),
    .b(_054_),
    .c(_037_),
    .z(_044_)
  );
  oai21v0x05 _162_ (
    .a1(_035_),
    .a2(_044_),
    .b(_042_),
    .z(_013_)
  );
  nd2av0x05 _163_ (
    .a(_083_),
    .b(_033_),
    .z(_045_)
  );
  oai21v0x05 _164_ (
    .a1(_035_),
    .a2(_045_),
    .b(data_word_recv_reg[3]),
    .z(_046_)
  );
  oai31v0x05 _165_ (
    .a1(_083_),
    .a2(_035_),
    .a3(_038_),
    .b(_046_),
    .z(_014_)
  );
  oai31v0x05 _166_ (
    .a1(_083_),
    .a2(_035_),
    .a3(_040_),
    .b(data_word_recv_reg[4]),
    .z(_047_)
  );
  oai31v0x05 _167_ (
    .a1(_083_),
    .a2(_035_),
    .a3(_043_),
    .b(_047_),
    .z(_015_)
  );
  nd2v0x05 _168_ (
    .a(_085_),
    .b(_020_),
    .z(_048_)
  );
  nd3v0x05 _169_ (
    .a(_085_),
    .b(_020_),
    .c(_028_),
    .z(_049_)
  );
  oai21v0x05 _170_ (
    .a1(_034_),
    .a2(_049_),
    .b(data_word_recv_reg[5]),
    .z(_050_)
  );
  oai21v0x05 _171_ (
    .a1(_039_),
    .a2(_048_),
    .b(_050_),
    .z(_016_)
  );
  oai21v0x05 _172_ (
    .a1(_041_),
    .a2(_049_),
    .b(data_word_recv_reg[6]),
    .z(_051_)
  );
  oai21v0x05 _173_ (
    .a1(_044_),
    .a2(_049_),
    .b(_051_),
    .z(_017_)
  );
  oai21v0x05 _174_ (
    .a1(_045_),
    .a2(_049_),
    .b(data_word_recv_reg[7]),
    .z(_052_)
  );
  oai31v0x05 _175_ (
    .a1(_083_),
    .a2(_038_),
    .a3(_049_),
    .b(_052_),
    .z(_018_)
  );
  dfnt1v0x2 _176_ (
    .cp(master_clock),
    .d(_000_),
    .z(spi_status[0])
  );
  dfnt1v0x2 _177_ (
    .cp(master_clock),
    .d(_001_),
    .z(spi_status[1])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _178_ (
    .cp(master_clock),
    .d(_002_),
    .z(activate_ss)
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _179_ (
    .cp(master_clock),
    .d(_003_),
    .z(activate_sclk)
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _180_ (
    .cp(master_clock),
    .d(_004_),
    .z(bit_counter[1])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _181_ (
    .cp(master_clock),
    .d(_005_),
    .z(bit_counter[2])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _182_ (
    .cp(master_clock),
    .d(_006_),
    .z(bit_counter[3])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _183_ (
    .cp(master_clock),
    .d(_007_),
    .z(bit_counter[4])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _184_ (
    .cp(master_clock),
    .d(_008_),
    .z(bit_counter[5])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _185_ (
    .cp(master_clock),
    .d(_009_),
    .z(bit_counter[6])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _186_ (
    .cp(master_clock),
    .d(_010_),
    .z(bit_counter[7])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _187_ (
    .cp(master_clock),
    .d(_011_),
    .z(data_word_recv_reg[0])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _188_ (
    .cp(master_clock),
    .d(_012_),
    .z(data_word_recv_reg[1])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _189_ (
    .cp(master_clock),
    .d(_013_),
    .z(data_word_recv_reg[2])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _190_ (
    .cp(master_clock),
    .d(_014_),
    .z(data_word_recv_reg[3])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _191_ (
    .cp(master_clock),
    .d(_015_),
    .z(data_word_recv_reg[4])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _192_ (
    .cp(master_clock),
    .d(_016_),
    .z(data_word_recv_reg[5])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _193_ (
    .cp(master_clock),
    .d(_017_),
    .z(data_word_recv_reg[6])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _194_ (
    .cp(master_clock),
    .d(_018_),
    .z(data_word_recv_reg[7])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "spi_module.v:65.15-65.87" *)
  neg_edge_det spi_edge_neg (
    .clk(master_clock),
    .ne(falling_sclk_edge),
    .sig(SCLK_IN)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "spi_module.v:64.15-64.86" *)
  pos_edge_det spi_edge_pos (
    .clk(master_clock),
    .pe(rising_sclk_edge),
    .sig(SCLK_IN)
  );
  assign SS = SS_OUT;
  assign data_word_recv = data_word_recv_reg;
  assign get_number_edge = rising_sclk_edge;
  assign is_ready = 1'h1;
  assign is_ready_reg = 1'h1;
  assign switch_number_edge = falling_sclk_edge;
endmodule

(* dynports =  1  *)
(* src = "clock_divider.v:4.1-17.10" *)
module clock_divider(clk_in, clk_out, do_reset, is_ready);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  (* src = "clock_divider.v:4.62-4.68" *)
  input clk_in;
  wire clk_in;
  (* src = "clock_divider.v:4.82-4.89" *)
  output clk_out;
  wire clk_out;
  (* src = "clock_divider.v:6.18-6.28" *)
  wire [3:0] divcounter;
  (* src = "clock_divider.v:4.102-4.110" *)
  input do_reset;
  wire do_reset;
  (* src = "clock_divider.v:4.123-4.131" *)
  output is_ready;
  wire is_ready;
  nr2v0x05 _08_ (
    .a(divcounter[0]),
    .b(do_reset),
    .z(_00_)
  );
  xnr2v0x05 _09_ (
    .a(divcounter[0]),
    .b(divcounter[1]),
    .z(_04_)
  );
  nr2v0x05 _10_ (
    .a(do_reset),
    .b(_04_),
    .z(_01_)
  );
  nd3v0x05 _11_ (
    .a(divcounter[0]),
    .b(divcounter[1]),
    .c(divcounter[2]),
    .z(_05_)
  );
  xaoi21v0x05 _12_ (
    .a1(divcounter[0]),
    .a2(divcounter[1]),
    .b(divcounter[2]),
    .z(_06_)
  );
  nr2v0x05 _13_ (
    .a(do_reset),
    .b(_06_),
    .z(_02_)
  );
  xor2v0x05 _14_ (
    .a(divcounter[3]),
    .b(_05_),
    .z(_07_)
  );
  nr2v0x05 _15_ (
    .a(do_reset),
    .b(_07_),
    .z(_03_)
  );
  (* src = "clock_divider.v:8.2-13.39" *)
  dfnt1v0x2 _16_ (
    .cp(clk_in),
    .d(_00_),
    .z(divcounter[0])
  );
  (* src = "clock_divider.v:8.2-13.39" *)
  dfnt1v0x2 _17_ (
    .cp(clk_in),
    .d(_01_),
    .z(divcounter[1])
  );
  (* src = "clock_divider.v:8.2-13.39" *)
  dfnt1v0x2 _18_ (
    .cp(clk_in),
    .d(_02_),
    .z(divcounter[2])
  );
  (* src = "clock_divider.v:8.2-13.39" *)
  dfnt1v0x2 _19_ (
    .cp(clk_in),
    .d(_03_),
    .z(divcounter[3])
  );
  assign clk_out = divcounter[3];
  assign is_ready = 1'h1;
endmodule

(* src = "spi2.v:14.1-156.10" *)
module fpga_top(WF_CLK, SIGNAL_CLOCK_OUT, SIGNAL_SS_OUT, SIGNAL_DATA_OUT, SIGNAL_CLOCK_IN, SIGNAL_SS_IN, SIGNAL_DATA_IN, TEST_SIGNAL_OUT);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  (* src = "spi2.v:19.13-19.28" *)
  input SIGNAL_CLOCK_IN;
  wire SIGNAL_CLOCK_IN;
  (* src = "spi2.v:16.14-16.30" *)
  output SIGNAL_CLOCK_OUT;
  wire SIGNAL_CLOCK_OUT;
  (* src = "spi2.v:21.13-21.27" *)
  input SIGNAL_DATA_IN;
  wire SIGNAL_DATA_IN;
  (* src = "spi2.v:18.14-18.29" *)
  output SIGNAL_DATA_OUT;
  wire SIGNAL_DATA_OUT;
  (* src = "spi2.v:20.13-20.25" *)
  input SIGNAL_SS_IN;
  wire SIGNAL_SS_IN;
  (* src = "spi2.v:17.14-17.27" *)
  output SIGNAL_SS_OUT;
  wire SIGNAL_SS_OUT;
  (* src = "spi2.v:22.14-22.29" *)
  output TEST_SIGNAL_OUT;
  wire TEST_SIGNAL_OUT;
  (* src = "spi2.v:15.13-15.19" *)
  input WF_CLK;
  wire WF_CLK;
  (* src = "spi2.v:38.16-38.20" *)
  wire [7:0] data;
  (* src = "spi2.v:49.7-49.27" *)
  wire divided_master_clock;
  (* src = "spi2.v:48.6-48.19" *)
  wire divider_ready;
  (* src = "spi2.v:34.7-34.16" *)
  wire proc_word;
  (* src = "spi2.v:35.7-35.17" *)
  wire proc_word2;
  (* src = "spi2.v:36.6-36.23" *)
  wire process_next_word;
  (* src = "spi2.v:37.6-37.24" *)
  wire process_next_word2;
  (* src = "spi2.v:42.16-42.25" *)
  wire [7:0] recv_data;
  (* src = "spi2.v:41.17-41.25" *)
  wire [7:0] recv_tmp;
  (* src = "spi2.v:47.6-47.15" *)
  wire reset_div;
  (* src = "spi2.v:28.6-28.15" *)
  wire reset_spi;
  (* src = "spi2.v:31.6-31.16" *)
  wire reset_spi2;
  (* src = "spi2.v:25.12-25.26" *)
  wire [7:0] resetn_counter;
  (* src = "spi2.v:29.6-29.15" *)
  wire spi_ready;
  (* src = "spi2.v:32.6-32.16" *)
  wire spi_ready2;
  (* src = "spi2.v:44.6-44.25" *)
  wire test_signal_control;
  iv1v0x05 _061_ (
    .a(resetn_counter[7]),
    .z(_041_)
  );
  an2v0x05 _062_ (
    .a(resetn_counter[0]),
    .b(resetn_counter[1]),
    .z(_042_)
  );
  an4v0x05 _063_ (
    .a(resetn_counter[0]),
    .b(resetn_counter[1]),
    .c(resetn_counter[3]),
    .d(resetn_counter[2]),
    .z(_043_)
  );
  an3v0x05 _064_ (
    .a(resetn_counter[5]),
    .b(resetn_counter[4]),
    .c(_043_),
    .z(_044_)
  );
  nd4v0x05 _065_ (
    .a(resetn_counter[5]),
    .b(resetn_counter[4]),
    .c(resetn_counter[6]),
    .d(_043_),
    .z(_045_)
  );
  or2v0x05 _066_ (
    .a(_041_),
    .b(_045_),
    .z(_046_)
  );
  aon21bv0x05 _067_ (
    .a1(divider_ready),
    .a2(spi_ready),
    .b(reset_spi),
    .z(_047_)
  );
  nd2av0x05 _068_ (
    .a(_046_),
    .b(_047_),
    .z(_000_)
  );
  an3v0x05 _069_ (
    .a(divider_ready),
    .b(spi_ready2),
    .c(spi_ready),
    .z(_048_)
  );
  nd3v0x05 _070_ (
    .a(divider_ready),
    .b(spi_ready2),
    .c(spi_ready),
    .z(_049_)
  );
  aon21v0x05 _071_ (
    .a1(reset_spi2),
    .a2(_049_),
    .b(_046_),
    .z(_001_)
  );
  nr2v0x05 _072_ (
    .a(process_next_word),
    .b(_048_),
    .z(_050_)
  );
  aoi112v0x05 _073_ (
    .a(_046_),
    .b(_050_),
    .c1(_048_),
    .c2(proc_word),
    .z(_002_)
  );
  nr2v0x05 _074_ (
    .a(process_next_word2),
    .b(_048_),
    .z(_051_)
  );
  aoi112v0x05 _075_ (
    .a(_046_),
    .b(_051_),
    .c1(_048_),
    .c2(proc_word2),
    .z(_003_)
  );
  nr3v0x05 _076_ (
    .a(process_next_word),
    .b(proc_word),
    .c(_049_),
    .z(_052_)
  );
  nd3abv0x05 _077_ (
    .a(process_next_word),
    .b(proc_word),
    .c(_048_),
    .z(_053_)
  );
  nd2v0x05 _078_ (
    .a(data[1]),
    .b(data[0]),
    .z(_054_)
  );
  nd4v0x05 _079_ (
    .a(data[3]),
    .b(data[2]),
    .c(data[1]),
    .d(data[0]),
    .z(_055_)
  );
  nr4v1x05 _080_ (
    .a(data[7]),
    .b(data[6]),
    .c(data[5]),
    .d(data[4]),
    .z(_056_)
  );
  nd2v0x05 _081_ (
    .a(_055_),
    .b(_056_),
    .z(_057_)
  );
  aoi21a2v0x05 _082_ (
    .a1(_052_),
    .a2(_057_),
    .b(data[0]),
    .z(_058_)
  );
  aoi112v0x05 _083_ (
    .a(_046_),
    .b(_058_),
    .c1(_052_),
    .c2(data[0]),
    .z(_004_)
  );
  aoi112v0x05 _084_ (
    .a(_041_),
    .b(_045_),
    .c1(_052_),
    .c2(_057_),
    .z(_059_)
  );
  xaon21v0x05 _085_ (
    .a1(data[0]),
    .a2(_052_),
    .b(data[1]),
    .z(_060_)
  );
  an2v0x05 _086_ (
    .a(_059_),
    .b(_060_),
    .z(_005_)
  );
  nr3abv0x05 _087_ (
    .a(data[2]),
    .b(_052_),
    .c(_054_),
    .z(_030_)
  );
  xooi21v0x05 _088_ (
    .a1(_053_),
    .a2(_054_),
    .b(data[2]),
    .z(_031_)
  );
  an2v0x05 _089_ (
    .a(_059_),
    .b(_031_),
    .z(_006_)
  );
  oan21v0x05 _090_ (
    .a1(data[3]),
    .a2(_030_),
    .b(_059_),
    .z(_007_)
  );
  nr3abv0x05 _091_ (
    .a(data[4]),
    .b(_053_),
    .c(_046_),
    .z(_008_)
  );
  nr3abv0x05 _092_ (
    .a(data[5]),
    .b(_053_),
    .c(_046_),
    .z(_009_)
  );
  nr3abv0x05 _093_ (
    .a(data[6]),
    .b(_053_),
    .c(_046_),
    .z(_010_)
  );
  nr3abv0x05 _094_ (
    .a(data[7]),
    .b(_053_),
    .c(_046_),
    .z(_011_)
  );
  nd2v0x05 _095_ (
    .a(resetn_counter[0]),
    .b(_046_),
    .z(_012_)
  );
  xnai21v2x05 _096_ (
    .a1(resetn_counter[0]),
    .a2(resetn_counter[1]),
    .b(_046_),
    .z(_013_)
  );
  xnai21v2x05 _097_ (
    .a1(resetn_counter[2]),
    .a2(_042_),
    .b(_046_),
    .z(_014_)
  );
  aoi21v0x05 _098_ (
    .a1(resetn_counter[2]),
    .a2(_042_),
    .b(resetn_counter[3]),
    .z(_032_)
  );
  oai21v0x05 _099_ (
    .a1(_043_),
    .a2(_032_),
    .b(_046_),
    .z(_015_)
  );
  xnai21v2x05 _100_ (
    .a1(resetn_counter[4]),
    .a2(_043_),
    .b(_046_),
    .z(_016_)
  );
  aoi21v0x05 _101_ (
    .a1(resetn_counter[4]),
    .a2(_043_),
    .b(resetn_counter[5]),
    .z(_033_)
  );
  oai21v0x05 _102_ (
    .a1(_044_),
    .a2(_033_),
    .b(_046_),
    .z(_017_)
  );
  xnai21v2x05 _103_ (
    .a1(resetn_counter[6]),
    .a2(_044_),
    .b(_046_),
    .z(_018_)
  );
  nd2v0x05 _104_ (
    .a(_041_),
    .b(_045_),
    .z(_019_)
  );
  nd3v0x05 _105_ (
    .a(recv_data[1]),
    .b(recv_data[0]),
    .c(recv_data[2]),
    .z(_034_)
  );
  or4v0x05 _106_ (
    .a(recv_data[5]),
    .b(recv_data[4]),
    .c(recv_data[7]),
    .d(recv_data[6]),
    .z(_035_)
  );
  nr3v0x05 _107_ (
    .a(_049_),
    .b(_034_),
    .c(_035_),
    .z(_036_)
  );
  nr3abv0x05 _108_ (
    .a(recv_data[1]),
    .b(recv_data[0]),
    .c(recv_data[3]),
    .z(_037_)
  );
  mxi2v0x05 _109_ (
    .a0(test_signal_control),
    .a1(_037_),
    .s(_036_),
    .z(_038_)
  );
  nr2v0x05 _110_ (
    .a(_046_),
    .b(_038_),
    .z(_020_)
  );
  oai21a2bv0x05 _111_ (
    .a1(divider_ready),
    .a2(reset_div),
    .b(_046_),
    .z(_021_)
  );
  nd3abv0x05 _112_ (
    .a(process_next_word2),
    .b(proc_word2),
    .c(_048_),
    .z(_039_)
  );
  nr3v0x05 _113_ (
    .a(_041_),
    .b(_045_),
    .c(_039_),
    .z(_040_)
  );
  mxn2v0x05 _114_ (
    .a0(recv_data[0]),
    .a1(recv_tmp[0]),
    .s(_040_),
    .z(_022_)
  );
  mxn2v0x05 _115_ (
    .a0(recv_data[1]),
    .a1(recv_tmp[1]),
    .s(_040_),
    .z(_023_)
  );
  mxn2v0x05 _116_ (
    .a0(recv_data[2]),
    .a1(recv_tmp[2]),
    .s(_040_),
    .z(_024_)
  );
  mxn2v0x05 _117_ (
    .a0(recv_data[3]),
    .a1(recv_tmp[3]),
    .s(_040_),
    .z(_025_)
  );
  mxn2v0x05 _118_ (
    .a0(recv_data[4]),
    .a1(recv_tmp[4]),
    .s(_040_),
    .z(_026_)
  );
  mxn2v0x05 _119_ (
    .a0(recv_data[5]),
    .a1(recv_tmp[5]),
    .s(_040_),
    .z(_027_)
  );
  mxn2v0x05 _120_ (
    .a0(recv_data[6]),
    .a1(recv_tmp[6]),
    .s(_040_),
    .z(_028_)
  );
  mxn2v0x05 _121_ (
    .a0(recv_data[7]),
    .a1(recv_tmp[7]),
    .s(_040_),
    .z(_029_)
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _122_ (
    .cp(WF_CLK),
    .d(_000_),
    .z(reset_spi)
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _123_ (
    .cp(WF_CLK),
    .d(_001_),
    .z(reset_spi2)
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _124_ (
    .cp(WF_CLK),
    .d(_002_),
    .z(process_next_word)
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _125_ (
    .cp(WF_CLK),
    .d(_003_),
    .z(process_next_word2)
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _126_ (
    .cp(WF_CLK),
    .d(_004_),
    .z(data[0])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _127_ (
    .cp(WF_CLK),
    .d(_005_),
    .z(data[1])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _128_ (
    .cp(WF_CLK),
    .d(_006_),
    .z(data[2])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _129_ (
    .cp(WF_CLK),
    .d(_007_),
    .z(data[3])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _130_ (
    .cp(WF_CLK),
    .d(_008_),
    .z(data[4])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _131_ (
    .cp(WF_CLK),
    .d(_009_),
    .z(data[5])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _132_ (
    .cp(WF_CLK),
    .d(_010_),
    .z(data[6])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _133_ (
    .cp(WF_CLK),
    .d(_011_),
    .z(data[7])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _134_ (
    .cp(WF_CLK),
    .d(_012_),
    .z(resetn_counter[0])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _135_ (
    .cp(WF_CLK),
    .d(_013_),
    .z(resetn_counter[1])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _136_ (
    .cp(WF_CLK),
    .d(_014_),
    .z(resetn_counter[2])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _137_ (
    .cp(WF_CLK),
    .d(_015_),
    .z(resetn_counter[3])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _138_ (
    .cp(WF_CLK),
    .d(_016_),
    .z(resetn_counter[4])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _139_ (
    .cp(WF_CLK),
    .d(_017_),
    .z(resetn_counter[5])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _140_ (
    .cp(WF_CLK),
    .d(_018_),
    .z(resetn_counter[6])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _141_ (
    .cp(WF_CLK),
    .d(_019_),
    .z(resetn_counter[7])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _142_ (
    .cp(WF_CLK),
    .d(_020_),
    .z(test_signal_control)
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _143_ (
    .cp(WF_CLK),
    .d(_021_),
    .z(reset_div)
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _144_ (
    .cp(WF_CLK),
    .d(_022_),
    .z(recv_data[0])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _145_ (
    .cp(WF_CLK),
    .d(_023_),
    .z(recv_data[1])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _146_ (
    .cp(WF_CLK),
    .d(_024_),
    .z(recv_data[2])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _147_ (
    .cp(WF_CLK),
    .d(_025_),
    .z(recv_data[3])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _148_ (
    .cp(WF_CLK),
    .d(_026_),
    .z(recv_data[4])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _149_ (
    .cp(WF_CLK),
    .d(_027_),
    .z(recv_data[5])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _150_ (
    .cp(WF_CLK),
    .d(_028_),
    .z(recv_data[6])
  );
  (* src = "spi2.v:88.2-154.4" *)
  dfnt1v0x2 _151_ (
    .cp(WF_CLK),
    .d(_029_),
    .z(recv_data[7])
  );
  (* src = "spi2.v:52.34-52.140" *)
  \$paramod\clock_divider\DIV_N=s32'00000000000000000000000000000010  clkdiv (
    .clk_in(WF_CLK),
    .clk_out(divided_master_clock),
    .do_reset(reset_div),
    .is_ready(divider_ready)
  );
  (* src = "spi2.v:56.2-69.24" *)
  \$paramod\spi_module\SPI_MASTER=1'1  spi_master (
    .OUTPUT_SIGNAL(SIGNAL_DATA_OUT),
    .SCLK_IN(divided_master_clock),
    .SCLK_OUT(SIGNAL_CLOCK_OUT),
    .SS_OUT(SIGNAL_SS_OUT),
    .data_word_send(data),
    .do_reset(reset_spi),
    .is_ready(spi_ready),
    .master_clock(WF_CLK),
    .process_next_word(process_next_word),
    .processing_word(proc_word)
  );
  (* src = "spi2.v:73.2-86.25" *)
  \$paramod\spi_module\SPI_MASTER=1'0  spi_slave (
    .INPUT_SIGNAL(SIGNAL_DATA_IN),
    .SCLK_IN(SIGNAL_CLOCK_IN),
    .SS_IN(SIGNAL_SS_IN),
    .data_word_recv(recv_tmp),
    .do_reset(reset_spi2),
    .is_ready(spi_ready2),
    .master_clock(WF_CLK),
    .process_next_word(process_next_word2),
    .processing_word(proc_word2)
  );
  assign TEST_SIGNAL_OUT = test_signal_control;
endmodule

(* src = "neg_edge_det.v:4.1-18.10" *)
module neg_edge_det(sig, clk, ne);
  (* src = "neg_edge_det.v:5.29-5.32" *)
  input clk;
  wire clk;
  (* src = "neg_edge_det.v:6.30-6.32" *)
  output ne;
  wire ne;
  (* src = "neg_edge_det.v:4.29-4.32" *)
  input sig;
  wire sig;
  (* src = "neg_edge_det.v:8.11-8.18" *)
  wire sig_dly;
  nr2av0x1 _0_ (
    .a(sig_dly),
    .b(sig),
    .z(ne)
  );
  (* src = "neg_edge_det.v:11.3-13.6" *)
  dfnt1v0x2 _1_ (
    .cp(clk),
    .d(sig),
    .z(sig_dly)
  );
endmodule

(* src = "pos_edge_det.v:4.1-18.10" *)
module pos_edge_det(sig, clk, pe);
  (* src = "pos_edge_det.v:5.29-5.32" *)
  input clk;
  wire clk;
  (* src = "pos_edge_det.v:6.30-6.32" *)
  output pe;
  wire pe;
  (* src = "pos_edge_det.v:4.29-4.32" *)
  input sig;
  wire sig;
  (* src = "pos_edge_det.v:8.11-8.18" *)
  wire sig_dly;
  nr2av0x1 _0_ (
    .a(sig),
    .b(sig_dly),
    .z(pe)
  );
  (* src = "pos_edge_det.v:11.3-13.6" *)
  dfnt1v0x2 _1_ (
    .cp(clk),
    .d(sig),
    .z(sig_dly)
  );
endmodule

(* dynports =  1  *)
(* src = "spi_module.v:9.1-143.10" *)
module spi_module(master_clock, SCLK_OUT, SCLK_IN, SS_OUT, SS_IN, OUTPUT_SIGNAL, processing_word, process_next_word, data_word_send, INPUT_SIGNAL, data_word_recv, do_reset, is_ready);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  (* src = "spi_module.v:25.13-25.25" *)
  input INPUT_SIGNAL;
  wire INPUT_SIGNAL;
  (* src = "spi_module.v:21.14-21.27" *)
  output OUTPUT_SIGNAL;
  wire OUTPUT_SIGNAL;
  (* src = "spi_module.v:18.13-18.20" *)
  input SCLK_IN;
  wire SCLK_IN;
  (* src = "spi_module.v:17.14-17.22" *)
  output SCLK_OUT;
  wire SCLK_OUT;
  (* src = "spi_module.v:73.7-73.9" *)
  wire SS;
  (* src = "spi_module.v:20.13-20.18" *)
  input SS_IN;
  wire SS_IN;
  (* src = "spi_module.v:19.14-19.20" *)
  output SS_OUT;
  wire SS_OUT;
  (* src = "spi_module.v:33.6-33.19" *)
  wire activate_sclk;
  (* src = "spi_module.v:32.6-32.17" *)
  wire activate_ss;
  (* src = "spi_module.v:42.27-42.38" *)
  wire [7:1] bit_counter;
  (* src = "spi_module.v:26.35-26.49" *)
  output [7:0] data_word_recv;
  wire [7:0] data_word_recv;
  (* src = "spi_module.v:40.27-40.45" *)
  wire [7:0] data_word_recv_reg;
  (* src = "spi_module.v:24.34-24.48" *)
  input [7:0] data_word_send;
  wire [7:0] data_word_send;
  (* src = "spi_module.v:27.13-27.21" *)
  input do_reset;
  wire do_reset;
  (* src = "spi_module.v:38.7-38.24" *)
  wire falling_sclk_edge;
  (* src = "spi_module.v:69.7-69.22" *)
  wire get_number_edge;
  (* src = "spi_module.v:28.14-28.22" *)
  output is_ready;
  wire is_ready;
  (* src = "spi_module.v:31.6-31.18" *)
  wire is_ready_reg;
  (* src = "spi_module.v:16.15-16.27" *)
  input master_clock;
  wire master_clock;
  (* src = "spi_module.v:23.13-23.30" *)
  input process_next_word;
  wire process_next_word;
  (* src = "spi_module.v:22.14-22.29" *)
  output processing_word;
  wire processing_word;
  (* src = "spi_module.v:37.7-37.23" *)
  wire rising_sclk_edge;
  (* onehot = 32'd1 *)
  wire [1:0] spi_status;
  (* src = "spi_module.v:71.7-71.25" *)
  wire switch_number_edge;
  iv1v0x05 _088_ (
    .a(bit_counter[5]),
    .z(_055_)
  );
  iv1v0x05 _089_ (
    .a(bit_counter[1]),
    .z(_056_)
  );
  iv1v0x05 _090_ (
    .a(activate_ss),
    .z(SS_OUT)
  );
  iv1v0x05 _091_ (
    .a(spi_status[0]),
    .z(processing_word)
  );
  iv1v0x05 _092_ (
    .a(do_reset),
    .z(_057_)
  );
  iv1v0x05 _093_ (
    .a(INPUT_SIGNAL),
    .z(_058_)
  );
  iv1v0x05 _094_ (
    .a(data_word_recv_reg[4]),
    .z(_059_)
  );
  nd2v0x05 _095_ (
    .a(activate_ss),
    .b(spi_status[1]),
    .z(_060_)
  );
  nr3abv0x05 _096_ (
    .a(activate_ss),
    .b(spi_status[1]),
    .c(do_reset),
    .z(_061_)
  );
  nd2av0x05 _097_ (
    .a(falling_sclk_edge),
    .b(_061_),
    .z(_062_)
  );
  nr3v0x05 _098_ (
    .a(bit_counter[3]),
    .b(bit_counter[2]),
    .c(bit_counter[1]),
    .z(_063_)
  );
  nr4v1x05 _099_ (
    .a(bit_counter[4]),
    .b(bit_counter[3]),
    .c(bit_counter[2]),
    .d(bit_counter[1]),
    .z(_064_)
  );
  or4v0x05 _100_ (
    .a(bit_counter[4]),
    .b(bit_counter[3]),
    .c(bit_counter[2]),
    .d(bit_counter[1]),
    .z(_065_)
  );
  nr2v0x05 _101_ (
    .a(bit_counter[7]),
    .b(bit_counter[6]),
    .z(_066_)
  );
  or2v0x05 _102_ (
    .a(bit_counter[7]),
    .b(bit_counter[6]),
    .z(_067_)
  );
  nd3v0x05 _103_ (
    .a(_055_),
    .b(_064_),
    .c(_066_),
    .z(_068_)
  );
  nd3v0x05 _104_ (
    .a(activate_ss),
    .b(falling_sclk_edge),
    .c(spi_status[1]),
    .z(_069_)
  );
  aoi31v0x05 _105_ (
    .a1(_055_),
    .a2(_064_),
    .a3(_066_),
    .b(_069_),
    .z(_070_)
  );
  nr3abv0x05 _106_ (
    .a(spi_status[0]),
    .b(process_next_word),
    .c(SCLK_IN),
    .z(_071_)
  );
  aoi112v0x05 _107_ (
    .a(_070_),
    .b(_071_),
    .c1(SS_OUT),
    .c2(spi_status[1]),
    .z(_072_)
  );
  oai21v0x05 _108_ (
    .a1(do_reset),
    .a2(_072_),
    .b(_062_),
    .z(_001_)
  );
  nd4v0x05 _109_ (
    .a(_055_),
    .b(falling_sclk_edge),
    .c(_064_),
    .d(_066_),
    .z(_073_)
  );
  oai21a2v0x05 _110_ (
    .a1(SCLK_IN),
    .a2(process_next_word),
    .b(spi_status[0]),
    .z(_074_)
  );
  oai211v0x05 _111_ (
    .a1(_060_),
    .a2(_073_),
    .b(_074_),
    .c(_057_),
    .z(_000_)
  );
  mxi2v0x05 _112_ (
    .a0(data_word_send[6]),
    .a1(data_word_send[7]),
    .s(bit_counter[1]),
    .z(_075_)
  );
  mxi2v0x05 _113_ (
    .a0(data_word_send[4]),
    .a1(data_word_send[5]),
    .s(bit_counter[1]),
    .z(_076_)
  );
  mxi2v0x05 _114_ (
    .a0(_076_),
    .a1(_075_),
    .s(bit_counter[2]),
    .z(_077_)
  );
  mxi2v0x05 _115_ (
    .a0(data_word_send[2]),
    .a1(data_word_send[3]),
    .s(bit_counter[1]),
    .z(_078_)
  );
  mxi2v0x05 _116_ (
    .a0(data_word_send[0]),
    .a1(data_word_send[1]),
    .s(bit_counter[1]),
    .z(_079_)
  );
  mxi2v0x05 _117_ (
    .a0(_079_),
    .a1(_078_),
    .s(bit_counter[2]),
    .z(_080_)
  );
  mxi2v0x05 _118_ (
    .a0(_080_),
    .a1(_077_),
    .s(bit_counter[3]),
    .z(_081_)
  );
  nr2v0x05 _119_ (
    .a(SS_OUT),
    .b(_081_),
    .z(OUTPUT_SIGNAL)
  );
  an2v0x05 _120_ (
    .a(activate_sclk),
    .b(SCLK_IN),
    .z(SCLK_OUT)
  );
  aoi21v0x05 _121_ (
    .a1(processing_word),
    .a2(spi_status[1]),
    .b(_071_),
    .z(_082_)
  );
  oai21v0x05 _122_ (
    .a1(_073_),
    .a2(_082_),
    .b(activate_ss),
    .z(_083_)
  );
  nd2av0x05 _123_ (
    .a(spi_status[1]),
    .b(_071_),
    .z(_084_)
  );
  aoi21v0x05 _124_ (
    .a1(_083_),
    .a2(_084_),
    .b(do_reset),
    .z(_002_)
  );
  oai31v0x05 _125_ (
    .a1(SS_OUT),
    .a2(_073_),
    .a3(_082_),
    .b(activate_sclk),
    .z(_085_)
  );
  aoi21v0x05 _126_ (
    .a1(_084_),
    .a2(_085_),
    .b(do_reset),
    .z(_003_)
  );
  xnai21v2x05 _127_ (
    .a1(_056_),
    .a2(_069_),
    .b(_057_),
    .z(_004_)
  );
  xor2v0x05 _128_ (
    .a(bit_counter[2]),
    .b(bit_counter[1]),
    .z(_086_)
  );
  xoon21v0x05 _129_ (
    .a1(bit_counter[1]),
    .a2(_069_),
    .b(bit_counter[2]),
    .z(_087_)
  );
  nd2v0x05 _130_ (
    .a(_057_),
    .b(_087_),
    .z(_005_)
  );
  oan21v0x05 _131_ (
    .a1(bit_counter[2]),
    .a2(bit_counter[1]),
    .b(bit_counter[3]),
    .z(_019_)
  );
  xooi21v0x05 _132_ (
    .a1(bit_counter[2]),
    .a2(bit_counter[1]),
    .b(bit_counter[3]),
    .z(_020_)
  );
  mxi2v0x05 _133_ (
    .a0(_020_),
    .a1(bit_counter[3]),
    .s(_069_),
    .z(_021_)
  );
  nd2v0x05 _134_ (
    .a(_057_),
    .b(_021_),
    .z(_006_)
  );
  xor2v0x05 _135_ (
    .a(bit_counter[4]),
    .b(_063_),
    .z(_022_)
  );
  aoi22v0x05 _136_ (
    .a1(bit_counter[4]),
    .a2(_069_),
    .b1(_070_),
    .b2(_022_),
    .z(_023_)
  );
  nr2v0x05 _137_ (
    .a(do_reset),
    .b(_023_),
    .z(_007_)
  );
  nd2v0x05 _138_ (
    .a(bit_counter[5]),
    .b(_069_),
    .z(_024_)
  );
  xnr2v0x05 _139_ (
    .a(bit_counter[5]),
    .b(_064_),
    .z(_025_)
  );
  nd2av0x05 _140_ (
    .a(_025_),
    .b(_070_),
    .z(_026_)
  );
  aoi21v0x05 _141_ (
    .a1(_024_),
    .a2(_026_),
    .b(do_reset),
    .z(_008_)
  );
  nr4v1x05 _142_ (
    .a(bit_counter[6]),
    .b(bit_counter[5]),
    .c(_065_),
    .d(_069_),
    .z(_027_)
  );
  nd2v0x05 _143_ (
    .a(bit_counter[7]),
    .b(_027_),
    .z(_028_)
  );
  oai31v0x05 _144_ (
    .a1(bit_counter[5]),
    .a2(_065_),
    .a3(_069_),
    .b(bit_counter[6]),
    .z(_029_)
  );
  aoi21v0x05 _145_ (
    .a1(_028_),
    .a2(_029_),
    .b(do_reset),
    .z(_009_)
  );
  nr3abv0x05 _146_ (
    .a(bit_counter[7]),
    .b(_057_),
    .c(_027_),
    .z(_010_)
  );
  nd2v0x05 _147_ (
    .a(rising_sclk_edge),
    .b(_061_),
    .z(_030_)
  );
  oai21v0x05 _148_ (
    .a1(_068_),
    .a2(_030_),
    .b(data_word_recv_reg[0]),
    .z(_031_)
  );
  aoi112v0x05 _149_ (
    .a(_058_),
    .b(_067_),
    .c1(_065_),
    .c2(bit_counter[5]),
    .z(_032_)
  );
  nd3abv0x05 _150_ (
    .a(_025_),
    .b(_030_),
    .c(_032_),
    .z(_033_)
  );
  nd2v0x05 _151_ (
    .a(_031_),
    .b(_033_),
    .z(_011_)
  );
  xnai21v2x05 _152_ (
    .a1(bit_counter[5]),
    .a2(_064_),
    .b(_066_),
    .z(_034_)
  );
  nd4v0x05 _153_ (
    .a(_055_),
    .b(bit_counter[1]),
    .c(_066_),
    .d(_086_),
    .z(_035_)
  );
  or3v0x05 _154_ (
    .a(bit_counter[4]),
    .b(_063_),
    .c(_019_),
    .z(_036_)
  );
  or2v0x05 _155_ (
    .a(_030_),
    .b(_036_),
    .z(_037_)
  );
  oai31v0x05 _156_ (
    .a1(_030_),
    .a2(_035_),
    .a3(_036_),
    .b(data_word_recv_reg[1]),
    .z(_038_)
  );
  nd4v0x05 _157_ (
    .a(bit_counter[1]),
    .b(_086_),
    .c(_025_),
    .d(_032_),
    .z(_039_)
  );
  oai21v0x05 _158_ (
    .a1(_037_),
    .a2(_039_),
    .b(_038_),
    .z(_012_)
  );
  nd4v0x05 _159_ (
    .a(_055_),
    .b(bit_counter[2]),
    .c(_056_),
    .d(_066_),
    .z(_040_)
  );
  oai31v0x05 _160_ (
    .a1(_030_),
    .a2(_036_),
    .a3(_040_),
    .b(data_word_recv_reg[2]),
    .z(_041_)
  );
  nd3v0x05 _161_ (
    .a(_056_),
    .b(_025_),
    .c(_032_),
    .z(_042_)
  );
  nd4v0x05 _162_ (
    .a(bit_counter[2]),
    .b(_056_),
    .c(_025_),
    .d(_032_),
    .z(_043_)
  );
  oai21v0x05 _163_ (
    .a1(_037_),
    .a2(_043_),
    .b(_041_),
    .z(_013_)
  );
  nd4v0x05 _164_ (
    .a(_055_),
    .b(bit_counter[2]),
    .c(bit_counter[1]),
    .d(_066_),
    .z(_044_)
  );
  oai31v0x05 _165_ (
    .a1(_030_),
    .a2(_036_),
    .a3(_044_),
    .b(data_word_recv_reg[3]),
    .z(_045_)
  );
  nd4v0x05 _166_ (
    .a(bit_counter[2]),
    .b(bit_counter[1]),
    .c(_025_),
    .d(_032_),
    .z(_046_)
  );
  oai21v0x05 _167_ (
    .a1(_037_),
    .a2(_046_),
    .b(_045_),
    .z(_014_)
  );
  or4v0x05 _168_ (
    .a(bit_counter[4]),
    .b(_063_),
    .c(_086_),
    .d(_019_),
    .z(_047_)
  );
  or2v0x05 _169_ (
    .a(_030_),
    .b(_047_),
    .z(_048_)
  );
  nr4v1x05 _170_ (
    .a(bit_counter[1]),
    .b(_030_),
    .c(_034_),
    .d(_047_),
    .z(_049_)
  );
  oai22v0x05 _171_ (
    .a1(_042_),
    .a2(_048_),
    .b1(_049_),
    .b2(_059_),
    .z(_015_)
  );
  xnai21v2x05 _172_ (
    .a1(bit_counter[4]),
    .a2(_063_),
    .b(_020_),
    .z(_050_)
  );
  or2v0x05 _173_ (
    .a(_030_),
    .b(_050_),
    .z(_051_)
  );
  oai31v0x05 _174_ (
    .a1(_030_),
    .a2(_035_),
    .a3(_050_),
    .b(data_word_recv_reg[5]),
    .z(_052_)
  );
  oai21v0x05 _175_ (
    .a1(_039_),
    .a2(_051_),
    .b(_052_),
    .z(_016_)
  );
  oai31v0x05 _176_ (
    .a1(_030_),
    .a2(_040_),
    .a3(_050_),
    .b(data_word_recv_reg[6]),
    .z(_053_)
  );
  oai21v0x05 _177_ (
    .a1(_043_),
    .a2(_051_),
    .b(_053_),
    .z(_017_)
  );
  oai31v0x05 _178_ (
    .a1(_030_),
    .a2(_044_),
    .a3(_050_),
    .b(data_word_recv_reg[7]),
    .z(_054_)
  );
  oai21v0x05 _179_ (
    .a1(_046_),
    .a2(_051_),
    .b(_054_),
    .z(_018_)
  );
  dfnt1v0x2 _180_ (
    .cp(master_clock),
    .d(_000_),
    .z(spi_status[0])
  );
  dfnt1v0x2 _181_ (
    .cp(master_clock),
    .d(_001_),
    .z(spi_status[1])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _182_ (
    .cp(master_clock),
    .d(_002_),
    .z(activate_ss)
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _183_ (
    .cp(master_clock),
    .d(_003_),
    .z(activate_sclk)
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _184_ (
    .cp(master_clock),
    .d(_004_),
    .z(bit_counter[1])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _185_ (
    .cp(master_clock),
    .d(_005_),
    .z(bit_counter[2])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _186_ (
    .cp(master_clock),
    .d(_006_),
    .z(bit_counter[3])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _187_ (
    .cp(master_clock),
    .d(_007_),
    .z(bit_counter[4])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _188_ (
    .cp(master_clock),
    .d(_008_),
    .z(bit_counter[5])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _189_ (
    .cp(master_clock),
    .d(_009_),
    .z(bit_counter[6])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _190_ (
    .cp(master_clock),
    .d(_010_),
    .z(bit_counter[7])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _191_ (
    .cp(master_clock),
    .d(_011_),
    .z(data_word_recv_reg[0])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _192_ (
    .cp(master_clock),
    .d(_012_),
    .z(data_word_recv_reg[1])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _193_ (
    .cp(master_clock),
    .d(_013_),
    .z(data_word_recv_reg[2])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _194_ (
    .cp(master_clock),
    .d(_014_),
    .z(data_word_recv_reg[3])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _195_ (
    .cp(master_clock),
    .d(_015_),
    .z(data_word_recv_reg[4])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _196_ (
    .cp(master_clock),
    .d(_016_),
    .z(data_word_recv_reg[5])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _197_ (
    .cp(master_clock),
    .d(_017_),
    .z(data_word_recv_reg[6])
  );
  (* src = "spi_module.v:77.2-141.5" *)
  dfnt1v0x2 _198_ (
    .cp(master_clock),
    .d(_018_),
    .z(data_word_recv_reg[7])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "spi_module.v:65.15-65.87" *)
  neg_edge_det spi_edge_neg (
    .clk(master_clock),
    .ne(falling_sclk_edge),
    .sig(SCLK_IN)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "spi_module.v:64.15-64.86" *)
  pos_edge_det spi_edge_pos (
    .clk(master_clock),
    .pe(rising_sclk_edge),
    .sig(SCLK_IN)
  );
  assign SS = SS_OUT;
  assign data_word_recv = data_word_recv_reg;
  assign get_number_edge = rising_sclk_edge;
  assign is_ready = 1'h1;
  assign is_ready_reg = 1'h1;
  assign switch_number_edge = falling_sclk_edge;
endmodule
