/* Generated by Yosys 0.32+74 (git sha1 b739213d9, x86_64-w64-mingw32-g++ 9.2.1 -Os) */

(* src = "display_clocks.v:10.1-96.10" *)
module \$abstract\display_clocks ();
endmodule

(* src = "display_demo_dvi.v:17.1-152.10" *)
module \$abstract\display_demo_dvi ();
endmodule

(* src = "display_demo_dvi_pmod3.v:13.1-123.10" *)
module \$abstract\display_demo_dvi_pmod3 ();
endmodule

(* src = "display_demo_vga.v:13.1-119.10" *)
module \$abstract\display_demo_vga ();
endmodule

(* src = "display_timings.v:10.1-80.10" *)
module \$abstract\display_timings ();
endmodule

(* src = "test_card_gradient.v:8.1-23.10" *)
module \$abstract\test_card_gradient ();
endmodule

(* src = "test_card_simple.v:8.1-31.10" *)
module \$abstract\test_card_simple ();
endmodule

(* src = "test_card_squares.v:8.1-54.10" *)
module \$abstract\test_card_squares ();
endmodule

(* src = "async_reset.v:8.1-25.10" *)
module async_reset(i_clk, i_rst, o_rst);
  wire _0_;
  wire _1_;
  (* src = "async_reset.v:9.17-9.22" *)
  input i_clk;
  wire i_clk;
  (* src = "async_reset.v:10.17-10.22" *)
  input i_rst;
  wire i_rst;
  (* init = 1'h1 *)
  (* src = "async_reset.v:11.17-11.22" *)
  output o_rst;
  wire o_rst;
  (* ASYNC_REG = "TRUE" *)
  (* init = 2'h3 *)
  (* src = "async_reset.v:14.40-14.47" *)
  wire [1:0] rst_shf;
  or2v0x05 _2_ (
    .a(rst_shf[0]),
    .b(i_rst),
    .z(_0_)
  );
  or2v0x05 _3_ (
    .a(i_rst),
    .b(rst_shf[1]),
    .z(_1_)
  );
  (* src = "async_reset.v:19.5-23.45" *)
  dfnt1v0x2 _4_ (
    .cp(i_clk),
    .d(i_rst),
    .z(rst_shf[0])
  );
  (* src = "async_reset.v:19.5-23.45" *)
  dfnt1v0x2 _5_ (
    .cp(i_clk),
    .d(_0_),
    .z(rst_shf[1])
  );
  (* src = "async_reset.v:19.5-23.45" *)
  dfnt1v0x2 _6_ (
    .cp(i_clk),
    .d(_1_),
    .z(o_rst)
  );
endmodule

(* src = "dvi_generator.v:8.1-94.10" *)
module dvi_generator(i_pix_clk, i_pix_clk_5x, i_rst, i_de, i_data_ch0, i_data_ch1, i_data_ch2, i_ctrl_ch0, i_ctrl_ch1, i_ctrl_ch2, o_tmds_ch0_serial, o_tmds_ch1_serial, o_tmds_ch2_serial, o_tmds_chc_serial);
  (* src = "dvi_generator.v:16.23-16.33" *)
  input [1:0] i_ctrl_ch0;
  wire [1:0] i_ctrl_ch0;
  (* src = "dvi_generator.v:17.23-17.33" *)
  input [1:0] i_ctrl_ch1;
  wire [1:0] i_ctrl_ch1;
  (* src = "dvi_generator.v:18.23-18.33" *)
  input [1:0] i_ctrl_ch2;
  wire [1:0] i_ctrl_ch2;
  (* src = "dvi_generator.v:13.23-13.33" *)
  input [7:0] i_data_ch0;
  wire [7:0] i_data_ch0;
  (* src = "dvi_generator.v:14.23-14.33" *)
  input [7:0] i_data_ch1;
  wire [7:0] i_data_ch1;
  (* src = "dvi_generator.v:15.23-15.33" *)
  input [7:0] i_data_ch2;
  wire [7:0] i_data_ch2;
  (* src = "dvi_generator.v:12.17-12.21" *)
  input i_de;
  wire i_de;
  (* src = "dvi_generator.v:9.17-9.26" *)
  input i_pix_clk;
  wire i_pix_clk;
  (* src = "dvi_generator.v:10.17-10.29" *)
  input i_pix_clk_5x;
  wire i_pix_clk_5x;
  (* src = "dvi_generator.v:11.17-11.22" *)
  input i_rst;
  wire i_rst;
  (* src = "dvi_generator.v:19.17-19.34" *)
  output o_tmds_ch0_serial;
  wire o_tmds_ch0_serial;
  (* src = "dvi_generator.v:20.17-20.34" *)
  output o_tmds_ch1_serial;
  wire o_tmds_ch1_serial;
  (* src = "dvi_generator.v:21.17-21.34" *)
  output o_tmds_ch2_serial;
  wire o_tmds_ch2_serial;
  (* src = "dvi_generator.v:22.17-22.34" *)
  output o_tmds_chc_serial;
  wire o_tmds_chc_serial;
  (* src = "dvi_generator.v:25.16-25.24" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9" *)
  wire [9:0] tmds_ch0;
  (* src = "dvi_generator.v:25.26-25.34" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9" *)
  wire [9:0] tmds_ch1;
  (* src = "dvi_generator.v:25.36-25.44" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9" *)
  wire [9:0] tmds_ch2;
  (* module_not_derived = 32'd1 *)
  (* src = "dvi_generator.v:27.22-34.6" *)
  tmds_encoder_dvi encode_ch0 (
    .i_clk(i_pix_clk),
    .i_ctrl(i_ctrl_ch0),
    .i_data(i_data_ch0),
    .i_de(i_de),
    .i_rst(i_rst),
    .o_tmds(tmds_ch0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "dvi_generator.v:36.22-43.6" *)
  tmds_encoder_dvi encode_ch1 (
    .i_clk(i_pix_clk),
    .i_ctrl(i_ctrl_ch1),
    .i_data(i_data_ch1),
    .i_de(i_de),
    .i_rst(i_rst),
    .o_tmds(tmds_ch1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "dvi_generator.v:45.22-52.6" *)
  tmds_encoder_dvi encode_ch2 (
    .i_clk(i_pix_clk),
    .i_ctrl(i_ctrl_ch2),
    .i_data(i_data_ch2),
    .i_de(i_de),
    .i_rst(i_rst),
    .o_tmds(tmds_ch2)
  );
  assign o_tmds_ch0_serial = 1'hx;
  assign o_tmds_ch1_serial = 1'hx;
  assign o_tmds_ch2_serial = 1'hx;
  assign o_tmds_chc_serial = 1'hx;
endmodule

(* src = "tmds_encoder_dvi.v:8.1-95.10" *)
module tmds_encoder_dvi(i_clk, i_rst, i_data, i_ctrl, i_de, o_tmds);
  (* src = "tmds_encoder_dvi.v:71.21-71.80" *)
  wire _000_;
  (* src = "tmds_encoder_dvi.v:76.21-76.80" *)
  wire _001_;
  (* src = "tmds_encoder_dvi.v:83.17-83.76" *)
  wire _002_;
  (* src = "tmds_encoder_dvi.v:89.17-89.76" *)
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  (* src = "tmds_encoder_dvi.v:43.23-43.30" *)
  (* unused_bits = "3 4" *)
  wire [4:0] balance;
  (* src = "tmds_encoder_dvi.v:46.22-46.26" *)
  wire [4:0] bias;
  (* src = "tmds_encoder_dvi.v:25.16-25.22" *)
  wire [8:0] enc_qm;
  (* src = "tmds_encoder_dvi.v:9.17-9.22" *)
  input i_clk;
  wire i_clk;
  (* src = "tmds_encoder_dvi.v:12.23-12.29" *)
  input [1:0] i_ctrl;
  wire [1:0] i_ctrl;
  (* src = "tmds_encoder_dvi.v:11.23-11.29" *)
  input [7:0] i_data;
  wire [7:0] i_data;
  (* src = "tmds_encoder_dvi.v:13.17-13.21" *)
  input i_de;
  wire i_de;
  (* src = "tmds_encoder_dvi.v:10.17-10.22" *)
  input i_rst;
  wire i_rst;
  (* src = "tmds_encoder_dvi.v:14.22-14.28" *)
  output [9:0] o_tmds;
  wire [9:0] o_tmds;
  (* src = "tmds_encoder_dvi.v:38.23-38.27" *)
  wire [4:0] ones;
  iv1v0x05 _133_ (
    .a(i_rst),
    .z(_090_)
  );
  iv1v0x05 _134_ (
    .a(i_de),
    .z(_091_)
  );
  iv1v0x05 _135_ (
    .a(bias[3]),
    .z(_092_)
  );
  iv1v0x05 _136_ (
    .a(bias[2]),
    .z(_093_)
  );
  xnr2v0x05 _137_ (
    .a(i_data[0]),
    .b(i_data[1]),
    .z(_094_)
  );
  xor3v1x05 _138_ (
    .a(i_data[0]),
    .b(i_data[1]),
    .c(i_data[3]),
    .z(_095_)
  );
  xor3v1x05 _139_ (
    .a(i_data[6]),
    .b(i_data[5]),
    .c(_095_),
    .z(_096_)
  );
  xor3v1x05 _140_ (
    .a(i_data[4]),
    .b(i_data[7]),
    .c(_096_),
    .z(_097_)
  );
  cgi2v0x05 _141_ (
    .a(i_data[6]),
    .b(i_data[5]),
    .c(_095_),
    .z(_098_)
  );
  cgi2v0x05 _142_ (
    .a(i_data[0]),
    .b(i_data[1]),
    .c(i_data[3]),
    .z(_099_)
  );
  nr2v0x05 _143_ (
    .a(_098_),
    .b(_099_),
    .z(_100_)
  );
  xor2v0x05 _144_ (
    .a(_098_),
    .b(_099_),
    .z(_101_)
  );
  aoi21v0x05 _145_ (
    .a1(i_data[2]),
    .a2(_097_),
    .b(_101_),
    .z(_102_)
  );
  cgi2v0x05 _146_ (
    .a(i_data[4]),
    .b(i_data[7]),
    .c(_096_),
    .z(_103_)
  );
  iv1v0x05 _147_ (
    .a(_103_),
    .z(_104_)
  );
  xnr2v0x05 _148_ (
    .a(i_data[2]),
    .b(_097_),
    .z(_105_)
  );
  xnai21v2x05 _149_ (
    .a1(i_data[2]),
    .a2(_097_),
    .b(i_data[0]),
    .z(_106_)
  );
  aoi21v0x05 _150_ (
    .a1(_104_),
    .a2(_106_),
    .b(_100_),
    .z(_107_)
  );
  aoi31v0x05 _151_ (
    .a1(i_data[2]),
    .a2(_097_),
    .a3(_101_),
    .b(_100_),
    .z(_108_)
  );
  aoi21a2v0x05 _152_ (
    .a1(_103_),
    .a2(_106_),
    .b(_108_),
    .z(_109_)
  );
  oan21bv0x05 _153_ (
    .a1(_102_),
    .a2(_107_),
    .b(_109_),
    .z(enc_qm[8])
  );
  iv1v0x05 _154_ (
    .a(enc_qm[8]),
    .z(_110_)
  );
  xnr2v0x05 _155_ (
    .a(_094_),
    .b(enc_qm[8]),
    .z(_111_)
  );
  iv1v0x05 _156_ (
    .a(_111_),
    .z(enc_qm[1])
  );
  xnr2v0x05 _157_ (
    .a(i_data[2]),
    .b(_111_),
    .z(_112_)
  );
  xnr2v0x05 _158_ (
    .a(i_data[2]),
    .b(_094_),
    .z(enc_qm[2])
  );
  xnr2v0x05 _159_ (
    .a(i_data[3]),
    .b(enc_qm[2]),
    .z(_113_)
  );
  xor2v0x05 _160_ (
    .a(enc_qm[8]),
    .b(_113_),
    .z(enc_qm[3])
  );
  xnr2v0x05 _161_ (
    .a(i_data[1]),
    .b(_113_),
    .z(_114_)
  );
  xor2v0x05 _162_ (
    .a(i_data[4]),
    .b(enc_qm[3]),
    .z(_115_)
  );
  xnr2v0x05 _163_ (
    .a(i_data[4]),
    .b(_113_),
    .z(enc_qm[4])
  );
  iv1v0x05 _164_ (
    .a(enc_qm[4]),
    .z(_116_)
  );
  xor2v0x05 _165_ (
    .a(i_data[5]),
    .b(enc_qm[4]),
    .z(_117_)
  );
  xnr2v0x05 _166_ (
    .a(enc_qm[8]),
    .b(_117_),
    .z(enc_qm[5])
  );
  xor2v0x05 _167_ (
    .a(i_data[6]),
    .b(enc_qm[5]),
    .z(_118_)
  );
  xor2v0x05 _168_ (
    .a(i_data[6]),
    .b(_117_),
    .z(enc_qm[6])
  );
  iv1v0x05 _169_ (
    .a(enc_qm[6]),
    .z(_119_)
  );
  cgi2v0x05 _170_ (
    .a(_114_),
    .b(enc_qm[5]),
    .c(enc_qm[6]),
    .z(_120_)
  );
  cgi2abv0x05 _171_ (
    .a(_114_),
    .b(enc_qm[5]),
    .c(_119_),
    .z(_121_)
  );
  cgi2v0x05 _172_ (
    .a(i_data[0]),
    .b(enc_qm[1]),
    .c(enc_qm[3]),
    .z(_122_)
  );
  iv1v0x05 _173_ (
    .a(_122_),
    .z(_123_)
  );
  or2v0x05 _174_ (
    .a(_120_),
    .b(_122_),
    .z(_124_)
  );
  xor3v1x05 _175_ (
    .a(i_data[6]),
    .b(enc_qm[8]),
    .c(_114_),
    .z(_125_)
  );
  xor2v0x05 _176_ (
    .a(_105_),
    .b(enc_qm[8]),
    .z(enc_qm[7])
  );
  cgi2cv0x05 _177_ (
    .a(_116_),
    .b(_125_),
    .c(enc_qm[7]),
    .z(_126_)
  );
  xnai21v2x05 _178_ (
    .a1(_121_),
    .a2(_122_),
    .b(_126_),
    .z(_127_)
  );
  xor3v1x05 _179_ (
    .a(_116_),
    .b(_125_),
    .c(enc_qm[7]),
    .z(_128_)
  );
  an2v0x05 _180_ (
    .a(enc_qm[2]),
    .b(_128_),
    .z(_129_)
  );
  nd2v0x05 _181_ (
    .a(enc_qm[2]),
    .b(_128_),
    .z(_130_)
  );
  xor3v1x05 _182_ (
    .a(_121_),
    .b(_122_),
    .c(_126_),
    .z(_131_)
  );
  nd4v0x05 _183_ (
    .a(_121_),
    .b(_123_),
    .c(_126_),
    .d(_129_),
    .z(_132_)
  );
  iv1v0x05 _184_ (
    .a(_132_),
    .z(ones[3])
  );
  xnr2v0x05 _185_ (
    .a(_129_),
    .b(_131_),
    .z(balance[2])
  );
  xnr2v0x05 _186_ (
    .a(enc_qm[2]),
    .b(_128_),
    .z(_018_)
  );
  iv1v0x05 _187_ (
    .a(_018_),
    .z(balance[1])
  );
  oai211v0x05 _188_ (
    .a1(_130_),
    .a2(_131_),
    .b(_124_),
    .c(_127_),
    .z(_019_)
  );
  nd2v0x05 _189_ (
    .a(_132_),
    .b(_019_),
    .z(_020_)
  );
  iv1v0x05 _190_ (
    .a(_020_),
    .z(ones[2])
  );
  nd2v0x05 _191_ (
    .a(_090_),
    .b(i_de),
    .z(_021_)
  );
  nd3abv0x05 _192_ (
    .a(bias[1]),
    .b(bias[3]),
    .c(_093_),
    .z(_022_)
  );
  xnai21v2x05 _193_ (
    .a1(_130_),
    .a2(_131_),
    .b(_018_),
    .z(_023_)
  );
  oai211v0x05 _194_ (
    .a1(ones[3]),
    .a2(_023_),
    .b(_022_),
    .c(_019_),
    .z(_024_)
  );
  mxi2v0x05 _195_ (
    .a0(_024_),
    .a1(_019_),
    .s(bias[4]),
    .z(_025_)
  );
  mxn2v0x05 _196_ (
    .a0(_024_),
    .a1(_019_),
    .s(bias[4]),
    .z(_026_)
  );
  oai22v0x05 _197_ (
    .a1(bias[4]),
    .a2(_022_),
    .b1(_023_),
    .b2(_020_),
    .z(_027_)
  );
  iv1v0x05 _198_ (
    .a(_027_),
    .z(_028_)
  );
  nr2v0x05 _199_ (
    .a(_025_),
    .b(_027_),
    .z(_029_)
  );
  nr3v0x05 _200_ (
    .a(_021_),
    .b(_025_),
    .c(_027_),
    .z(_003_)
  );
  nr2v0x05 _201_ (
    .a(_021_),
    .b(_026_),
    .z(_002_)
  );
  nr4v1x05 _202_ (
    .a(i_rst),
    .b(_091_),
    .c(_110_),
    .d(_028_),
    .z(_001_)
  );
  nr3v0x05 _203_ (
    .a(enc_qm[8]),
    .b(_021_),
    .c(_028_),
    .z(_000_)
  );
  nr2v0x05 _204_ (
    .a(i_de),
    .b(i_ctrl[0]),
    .z(_030_)
  );
  nr2v0x05 _205_ (
    .a(i_rst),
    .b(_030_),
    .z(_031_)
  );
  or2v0x05 _206_ (
    .a(i_rst),
    .b(_030_),
    .z(_032_)
  );
  aoi21v0x05 _207_ (
    .a1(_110_),
    .a2(_027_),
    .b(_025_),
    .z(_033_)
  );
  xor2v0x05 _208_ (
    .a(i_data[0]),
    .b(_033_),
    .z(_034_)
  );
  aoi21v0x05 _209_ (
    .a1(i_de),
    .a2(_034_),
    .b(_032_),
    .z(_004_)
  );
  oai23av0x05 _210_ (
    .a3(_027_),
    .b1(_026_),
    .b2(_111_),
    .z(_035_)
  );
  aoi21v0x05 _211_ (
    .a1(_094_),
    .a2(_027_),
    .b(_035_),
    .z(_036_)
  );
  aoi21a2v0x05 _212_ (
    .a1(i_de),
    .a2(_036_),
    .b(_032_),
    .z(_005_)
  );
  oai23av0x05 _213_ (
    .a3(_027_),
    .b1(_026_),
    .b2(enc_qm[2]),
    .z(_037_)
  );
  aoi21v0x05 _214_ (
    .a1(_112_),
    .a2(_027_),
    .b(_037_),
    .z(_038_)
  );
  oai21v0x05 _215_ (
    .a1(_091_),
    .a2(_038_),
    .b(_031_),
    .z(_006_)
  );
  nd2av0x05 _216_ (
    .a(_113_),
    .b(_027_),
    .z(_039_)
  );
  mxi2v0x05 _217_ (
    .a0(_025_),
    .a1(_029_),
    .s(enc_qm[3]),
    .z(_040_)
  );
  aoi31v0x05 _218_ (
    .a1(i_de),
    .a2(_039_),
    .a3(_040_),
    .b(_032_),
    .z(_007_)
  );
  oai23av0x05 _219_ (
    .a3(_027_),
    .b1(_026_),
    .b2(enc_qm[4]),
    .z(_041_)
  );
  aoi21v0x05 _220_ (
    .a1(_115_),
    .a2(_027_),
    .b(_041_),
    .z(_042_)
  );
  oai21v0x05 _221_ (
    .a1(_091_),
    .a2(_042_),
    .b(_031_),
    .z(_008_)
  );
  aoi21v0x05 _222_ (
    .a1(_117_),
    .a2(_027_),
    .b(_091_),
    .z(_043_)
  );
  mxi2v0x05 _223_ (
    .a0(_025_),
    .a1(_029_),
    .s(enc_qm[5]),
    .z(_044_)
  );
  aoi21v0x05 _224_ (
    .a1(_043_),
    .a2(_044_),
    .b(_032_),
    .z(_009_)
  );
  oai23av0x05 _225_ (
    .a3(_027_),
    .b1(_026_),
    .b2(enc_qm[6]),
    .z(_045_)
  );
  aoi21v0x05 _226_ (
    .a1(_118_),
    .a2(_027_),
    .b(_045_),
    .z(_046_)
  );
  oai21v0x05 _227_ (
    .a1(_091_),
    .a2(_046_),
    .b(_031_),
    .z(_010_)
  );
  nd2av0x05 _228_ (
    .a(_105_),
    .b(_027_),
    .z(_047_)
  );
  mxi2v0x05 _229_ (
    .a0(_025_),
    .a1(_029_),
    .s(enc_qm[7]),
    .z(_048_)
  );
  aoi31v0x05 _230_ (
    .a1(i_de),
    .a2(_047_),
    .a3(_048_),
    .b(_032_),
    .z(_011_)
  );
  oai21v0x05 _231_ (
    .a1(_091_),
    .a2(_110_),
    .b(_031_),
    .z(_012_)
  );
  xnai21v2x05 _232_ (
    .a1(i_ctrl[1]),
    .a2(i_ctrl[0]),
    .b(_091_),
    .z(_049_)
  );
  oai211v0x05 _233_ (
    .a1(_091_),
    .a2(_033_),
    .b(_049_),
    .c(_090_),
    .z(_013_)
  );
  nr2v0x05 _234_ (
    .a(bias[1]),
    .b(_018_),
    .z(_050_)
  );
  xor2v0x05 _235_ (
    .a(bias[1]),
    .b(_018_),
    .z(_051_)
  );
  xor3v1x05 _236_ (
    .a(bias[1]),
    .b(_110_),
    .c(_018_),
    .z(_052_)
  );
  aoi21v0x05 _237_ (
    .a1(_027_),
    .a2(_051_),
    .b(_021_),
    .z(_053_)
  );
  oai21v0x05 _238_ (
    .a1(_026_),
    .a2(_052_),
    .b(_053_),
    .z(_054_)
  );
  aoi21v0x05 _239_ (
    .a1(_029_),
    .a2(_052_),
    .b(_054_),
    .z(_014_)
  );
  nr2v0x05 _240_ (
    .a(bias[2]),
    .b(balance[2]),
    .z(_055_)
  );
  xor3v1x05 _241_ (
    .a(_093_),
    .b(_130_),
    .c(_131_),
    .z(_056_)
  );
  cgi2cv0x05 _242_ (
    .a(bias[1]),
    .b(enc_qm[8]),
    .c(_018_),
    .z(_057_)
  );
  xor2v0x05 _243_ (
    .a(_056_),
    .b(_057_),
    .z(_058_)
  );
  cgi2v0x05 _244_ (
    .a(bias[1]),
    .b(enc_qm[8]),
    .c(_018_),
    .z(_059_)
  );
  xnr2v0x05 _245_ (
    .a(_056_),
    .b(_059_),
    .z(_060_)
  );
  mxn2v0x05 _246_ (
    .a0(_058_),
    .a1(_060_),
    .s(_025_),
    .z(_061_)
  );
  xnai21v2x05 _247_ (
    .a1(_052_),
    .a2(_061_),
    .b(_028_),
    .z(_062_)
  );
  xaoi21v0x05 _248_ (
    .a1(enc_qm[8]),
    .a2(balance[1]),
    .b(balance[2]),
    .z(_063_)
  );
  xnr2v0x05 _249_ (
    .a(_093_),
    .b(_063_),
    .z(_064_)
  );
  xnai21v2x05 _250_ (
    .a1(_050_),
    .a2(_064_),
    .b(_027_),
    .z(_065_)
  );
  aoi21v0x05 _251_ (
    .a1(_062_),
    .a2(_065_),
    .b(_021_),
    .z(_015_)
  );
  cgi2bv0x05 _252_ (
    .a(bias[2]),
    .b(_050_),
    .c(_063_),
    .z(_066_)
  );
  xaon21v0x05 _253_ (
    .a1(enc_qm[8]),
    .a2(_023_),
    .b(_020_),
    .z(_067_)
  );
  xor3v1x05 _254_ (
    .a(bias[3]),
    .b(_066_),
    .c(_067_),
    .z(_068_)
  );
  cgi2bv0x05 _255_ (
    .a(_052_),
    .b(_056_),
    .c(_059_),
    .z(_069_)
  );
  xaoi21v0x05 _256_ (
    .a1(_132_),
    .a2(_019_),
    .b(_092_),
    .z(_070_)
  );
  nr2v0x05 _257_ (
    .a(_093_),
    .b(balance[2]),
    .z(_071_)
  );
  xor3v1x05 _258_ (
    .a(_069_),
    .b(_070_),
    .c(_071_),
    .z(_072_)
  );
  cgi2bv0x05 _259_ (
    .a(_056_),
    .b(_057_),
    .c(_052_),
    .z(_073_)
  );
  xor3v1x05 _260_ (
    .a(_055_),
    .b(_070_),
    .c(_073_),
    .z(_074_)
  );
  mxn2v0x05 _261_ (
    .a0(_072_),
    .a1(_074_),
    .s(_026_),
    .z(_075_)
  );
  mxi2v0x05 _262_ (
    .a0(_068_),
    .a1(_075_),
    .s(_028_),
    .z(_076_)
  );
  nr2v0x05 _263_ (
    .a(_021_),
    .b(_076_),
    .z(_016_)
  );
  cgi2v0x05 _264_ (
    .a(_069_),
    .b(_070_),
    .c(_071_),
    .z(_077_)
  );
  xor2v0x05 _265_ (
    .a(bias[4]),
    .b(_019_),
    .z(_078_)
  );
  xooi21v0x05 _266_ (
    .a1(_092_),
    .a2(_020_),
    .b(_078_),
    .z(_079_)
  );
  xnai21v2x05 _267_ (
    .a1(_077_),
    .a2(_079_),
    .b(_025_),
    .z(_080_)
  );
  cgi2bv0x05 _268_ (
    .a(_055_),
    .b(_070_),
    .c(_073_),
    .z(_081_)
  );
  xooi21v0x05 _269_ (
    .a1(bias[3]),
    .a2(_020_),
    .b(_078_),
    .z(_082_)
  );
  xnai21v2x05 _270_ (
    .a1(_081_),
    .a2(_082_),
    .b(_026_),
    .z(_083_)
  );
  aon21bv0x05 _271_ (
    .a1(_080_),
    .a2(_083_),
    .b(_028_),
    .z(_084_)
  );
  cgi2v0x05 _272_ (
    .a(_092_),
    .b(_066_),
    .c(_067_),
    .z(_085_)
  );
  oai211v0x05 _273_ (
    .a1(ones[3]),
    .a2(_023_),
    .b(_019_),
    .c(enc_qm[8]),
    .z(_086_)
  );
  oai21v0x05 _274_ (
    .a1(enc_qm[8]),
    .a2(_019_),
    .b(_086_),
    .z(_087_)
  );
  xor2v0x05 _275_ (
    .a(bias[4]),
    .b(_087_),
    .z(_088_)
  );
  xnai21v2x05 _276_ (
    .a1(_085_),
    .a2(_088_),
    .b(_027_),
    .z(_089_)
  );
  aoi21v0x05 _277_ (
    .a1(_084_),
    .a2(_089_),
    .b(_021_),
    .z(_017_)
  );
  (* src = "tmds_encoder_dvi.v:48.5-94.8" *)
  dfnt1v0x2 _278_ (
    .cp(i_clk),
    .d(_004_),
    .z(o_tmds[0])
  );
  (* src = "tmds_encoder_dvi.v:48.5-94.8" *)
  dfnt1v0x2 _279_ (
    .cp(i_clk),
    .d(_005_),
    .z(o_tmds[1])
  );
  (* src = "tmds_encoder_dvi.v:48.5-94.8" *)
  dfnt1v0x2 _280_ (
    .cp(i_clk),
    .d(_006_),
    .z(o_tmds[2])
  );
  (* src = "tmds_encoder_dvi.v:48.5-94.8" *)
  dfnt1v0x2 _281_ (
    .cp(i_clk),
    .d(_007_),
    .z(o_tmds[3])
  );
  (* src = "tmds_encoder_dvi.v:48.5-94.8" *)
  dfnt1v0x2 _282_ (
    .cp(i_clk),
    .d(_008_),
    .z(o_tmds[4])
  );
  (* src = "tmds_encoder_dvi.v:48.5-94.8" *)
  dfnt1v0x2 _283_ (
    .cp(i_clk),
    .d(_009_),
    .z(o_tmds[5])
  );
  (* src = "tmds_encoder_dvi.v:48.5-94.8" *)
  dfnt1v0x2 _284_ (
    .cp(i_clk),
    .d(_010_),
    .z(o_tmds[6])
  );
  (* src = "tmds_encoder_dvi.v:48.5-94.8" *)
  dfnt1v0x2 _285_ (
    .cp(i_clk),
    .d(_011_),
    .z(o_tmds[7])
  );
  (* src = "tmds_encoder_dvi.v:48.5-94.8" *)
  dfnt1v0x2 _286_ (
    .cp(i_clk),
    .d(_012_),
    .z(o_tmds[8])
  );
  (* src = "tmds_encoder_dvi.v:48.5-94.8" *)
  dfnt1v0x2 _287_ (
    .cp(i_clk),
    .d(_013_),
    .z(o_tmds[9])
  );
  (* src = "tmds_encoder_dvi.v:48.5-94.8" *)
  dfnt1v0x2 _288_ (
    .cp(i_clk),
    .d(_014_),
    .z(bias[1])
  );
  (* src = "tmds_encoder_dvi.v:48.5-94.8" *)
  dfnt1v0x2 _289_ (
    .cp(i_clk),
    .d(_015_),
    .z(bias[2])
  );
  (* src = "tmds_encoder_dvi.v:48.5-94.8" *)
  dfnt1v0x2 _290_ (
    .cp(i_clk),
    .d(_016_),
    .z(bias[3])
  );
  (* src = "tmds_encoder_dvi.v:48.5-94.8" *)
  dfnt1v0x2 _291_ (
    .cp(i_clk),
    .d(_017_),
    .z(bias[4])
  );
  always @(posedge i_clk) begin
    if (_000_)
      $write("\t%3d %09b %3d, %3d, A1\n", $unsigned(i_data), $unsigned({ enc_qm[8:1], i_data[0] }), $signed({ 1'h0, ones[3:2], balance[2:1] }), $signed({ bias[4:1], 1'h0 }));
    if (_001_)
      $write("\t%3d %09b %3d, %3d, A0\n", $unsigned(i_data), $unsigned({ enc_qm[8:1], i_data[0] }), $signed({ 1'h0, ones[3:2], balance[2:1] }), $signed({ bias[4:1], 1'h0 }));
    if (_002_)
      $write("\t%3d %09b %3d, %3d, B1\n", $unsigned(i_data), $unsigned({ enc_qm[8:1], i_data[0] }), $signed({ 1'h0, ones[3:2], balance[2:1] }), $signed({ bias[4:1], 1'h0 }));
    if (_003_)
      $write("\t%3d %09b %3d, %3d, B0\n", $unsigned(i_data), $unsigned({ enc_qm[8:1], i_data[0] }), $signed({ 1'h0, ones[3:2], balance[2:1] }), $signed({ bias[4:1], 1'h0 }));
  end
  assign balance[0] = 1'h0;
  assign bias[0] = 1'h0;
  assign enc_qm[0] = i_data[0];
  assign { ones[4], ones[1:0] } = { 1'h0, balance[2:1] };
endmodule
